<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Portfolio</title>
      <link href="/Portfolio.html"/>
      <url>/Portfolio.html</url>
      
        <content type="html"><![CDATA[<p>This is my portfolio for graduation program application, including some of my games and computer graphics projects. It does not look fancy or that advanced, but for me, it is a very good start.<a id="more"></a></p><hr><p>&nbsp;</p><h2 id="Game-Projects"><a href="#Game-Projects" class="headerlink" title="Game Projects"></a>Game Projects</h2><h3 id="Kinetic-Game-“The-Magic-Matrix”"><a href="#Kinetic-Game-“The-Magic-Matrix”" class="headerlink" title="Kinetic Game “The Magic Matrix”"></a>Kinetic Game “The Magic Matrix”</h3><p>This is a kinetic game project made for our <span class="label info"> Digital Media Processing</span> course. To play this game, a player has to be in front of a kinetic sensor, and then use his or her hands to control the two shields. A player has to constantly adjust the positions of the shields to make the magic current between the shields to cut up the upcoming obstacles.</p><p>There was a demonstration video, but unfortunately, we lost it. So here I just put some images to show a general view of it.</p><p><img src="https://ww1.yunjiexi.club/2020/01/03/j0gla.png" alt></p><p>When the player misses, a camera shaking animation takes place, giving a stimulating feedback. The camera shaking cannot be perceived through an image, but you can still feel it by the distorted word “miss”.</p><p><img src="https://ww1.yunjiexi.club/2020/01/03/j037X.png" alt></p><p>The most difficult part of this project was how to apply kinetic controller in Unity. We checked out a lot of materials online and finally managed to do it by using APIs to implement interfaces and compiling it into a <span class="label info"> DLL</span> file, which we could use later in Unity.</p><h3 id="Multiplayer-Game-“Hide-And-Seek”"><a href="#Multiplayer-Game-“Hide-And-Seek”" class="headerlink" title="Multiplayer Game “Hide And Seek”"></a>Multiplayer Game “Hide And Seek”</h3><p>This was my first attempt to develop a online multiplayer game with a group of people. In the game, players will be evenly divided into two groups: hiders and seekers. A hider will be automatically turned to an object matching the scene, for example, a chair for a room scene. And the hider has to find a place that is not too strange to hide. For seekers, just find out all the hiders.</p><p>For instance, in the picture below, the hiders are soccer and globe. Obviously, they got the wrong place to hide because, normally, a globe or a soccer does not appear on a washing machine.</p><p><img src="https://ww1.yunjiexi.club/2020/01/03/j0WIP.png" alt></p><p><img src="https://ww1.yunjiexi.club/2020/01/03/j0NOC.png" alt></p><p>The game mechanism is very simple, therefore the server involves only a few calculations. The complex collision detections between objects are sensitive to time, so we keep this part in the client to assure the agility. Even though the server is not that sophisticated compared to the client, we still allocated the same number of people to implement it, making it difficult for client to keep up with the schedule.</p><hr><p>&nbsp;</p><h2 id="Other-Projects"><a href="#Other-Projects" class="headerlink" title="Other Projects"></a>Other Projects</h2><h3 id="Non-Euclidean-Space"><a href="#Non-Euclidean-Space" class="headerlink" title="Non-Euclidean Space"></a>Non-Euclidean Space</h3><p>Once I watched a video about this, the author implemented a OpenGL engine to render non-Euclidean space. It was really amazing, and I tried it myself in Unity. The whole scene consists of two tunnels: a long one and a short one. The long tunnel is lone but looks short inside while the short tunnel is short but looks much longer inside.</p><p>I’ve wrote an article about this, you can check it for more details <a href="/UnityLab1.html" title="here">here</a>.</p><h3 id="Custom-Renderer"><a href="#Custom-Renderer" class="headerlink" title="Custom Renderer"></a>Custom Renderer</h3><p>This is a custom renderer I am working on using OpenGL and <a href="https://github.com/ocornut/imgui" target="_blank" rel="noopener">ImGUI</a>. It is going to be my diploma project product, therefore I will keep going further to make it more delicate and qualified.</p><ol><li>It supports skybox and you can turn it on or off.</li></ol><p><img src="https://ww1.yunjiexi.club/2020/01/06/jVUAP.png" alt></p><p><img src="https://ww1.yunjiexi.club/2020/01/06/jVy7w.png" alt></p><ol start="2"><li>It is capable of loading custom <span class="label info"> OBJ</span> file and corresponding materials and textures.</li></ol><p><img src="https://ww1.yunjiexi.club/2020/01/06/jVA3Q.png" alt></p><ol start="3"><li>You can move, rotate, or scale your models through inspector panel in runtime.</li></ol><p><img src="https://ww1.yunjiexi.club/2020/01/06/jVBIq.png" alt></p><ol start="4"><li>You can modify the shaders attached to a model in runtime. The shader files in the hard drive will also be changed and saved.</li></ol><p><img src="https://ww1.yunjiexi.club/2020/01/06/jVdfC.png" alt></p><p>These are just part of the renderer’s rasterized rendering, days of work. After this, I will complete the rasterization pipleline and add realtime raytracing renderering.</p><p>&nbsp;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity Compute Shader#1 - Overview</title>
      <link href="/UnityComputeShader1.html"/>
      <url>/UnityComputeShader1.html</url>
      
        <content type="html"><![CDATA[<p>You’ve probably learned enough about vertex shader and fragment shader, here we are going to look at a different kind of shader that takes advantage of the GPU parallelization. It is called compute shader which, unlike vertex and fragment shader, is outside the basic rasterization pipeline.<a id="more"></a></p><hr><h2 id="What-Is-A-Compute-Shader"><a href="#What-Is-A-Compute-Shader" class="headerlink" title="What Is A Compute Shader"></a>What Is A Compute Shader</h2><p>Basically, compute shaders are programs that run on your GPU and take advantage of the paralleled architecture of GPU to accelerate rendering. In Unity, pretty much like regular shaders, compute shaders are Asset files with a <strong><em>.compute</em></strong> file extension. A compute shader you create contains default code which yields a fractal texture.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// Each #kernel tells which function to compile; you can have many kernels</span><span class="token macro property">#<span class="token directive keyword">pragma</span> kernel CSMain</span><span class="token comment" spellcheck="true">// Create a RenderTexture with enableRandomWrite flag and set it</span><span class="token comment" spellcheck="true">// with cs.SetTexture</span>RWTexture2D<span class="token operator">&lt;</span>float4<span class="token operator">></span> Result<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token function">numthreads</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">void</span> <span class="token function">CSMain</span> <span class="token punctuation">(</span>uint3 id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: insert actual code here!</span>    Result<span class="token punctuation">[</span>id<span class="token punctuation">.</span>xy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">float4</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>x <span class="token operator">&amp;</span> id<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span>x <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">15.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span>y <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">15.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li><p><code>#pragma kernal</code> is used to define a kernal function, which can be refered to as the enter point of a compute shader program (like a <code>main</code> in C++). Every invoking of a kernal function processes a pixel of a texture, and GPU parallel invokes the kernal function to process all the pixels. You are free to define multiple kernal functions, and then invoke one of them.</p></li><li><p><code>RWTexture2D&lt;float4&gt; Result</code> defines a variable of texture type since a compute shader process data from a texture instead of a mesh. The initial <code>RW</code> means our compute shader program can read and write the texture.</p></li><li><p><code>[numthreads(8, 8, 1)]</code> determines the size of a thread group. The number of threads in a group is the product of the first two integers, in this case, a thread group consists of 64 threads. It’s easy to know how many groups you should create, just divide the texture size by the group size.</p></li><li><p><code>SV_DispatchThreadID</code> means that the kernal function takes a thread’s ID as parameter. <code>id.xy</code> determines which pixel is processed by this thread.</p></li></ol><p>It looks pretty simple, right?</p><hr><p>&nbsp;</p><h2 id="Run-A-Compute-Shader"><a href="#Run-A-Compute-Shader" class="headerlink" title="Run A Compute Shader"></a>Run A Compute Shader</h2><p>It is time to get our compute shader running! It’s been mentioned that a compute shader doesn’t rely on data from a mesh, instead, it processes data from a texture. Since it is so, we cannot expect it to be attached to a meterial and run in a mesh renderer. So how can we actually activate it?</p><p>First, we have to know that a compute shader has to be invoked in a C# script. So we can attach a script to the scene camera and then execute the shader, and finally use <code>OnRenderImage</code> function to blit the texture to screen. Now let’s get moving.</p><ol><li>Create a C# script <code>Master.cs</code>.</li><li>Define variables we are going to use.</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// The compute shader we want to execute</span><span class="token keyword">public</span> ComputeShader Shader<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The texture where the data come from</span><span class="token keyword">private</span> RenderTexture _target<span class="token punctuation">;</span></code></pre><ol start="3"><li>Initialize the target texture.</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">InitRenderTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// If a texture exists and doesn't match the screen size, release it.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_target <span class="token operator">==</span> null <span class="token operator">||</span> _target<span class="token punctuation">.</span>width <span class="token operator">!=</span> Screen<span class="token punctuation">.</span>width <span class="token operator">||</span> _target<span class="token punctuation">.</span>height <span class="token operator">!=</span> Screen<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_target <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            _target<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Re-create a matching texture.</span>     _target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RenderTexture</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>width<span class="token punctuation">,</span> Screen<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>        RenderTextureFormat<span class="token punctuation">.</span>ARGBFloat<span class="token punctuation">,</span> RenderTextureReadWrite<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Enable random write flag so we can modify the texture in CSMain</span>    _target<span class="token punctuation">.</span>enableRandomWrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    _target<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>Run the compute shader. <code>SetTexture</code> allows us to pass on the target texture to the compute shader. The first parameter is the index of a kernal function. In this case, there is only one kernal function so we can simply use <code>0</code>; if there are more than one kernal functions, use <code>FindKernal</code> to return a kernal’s index. <code>Dispatch</code> is used to execute the compute shader. The first parameter is the index of a kernal function, <code>threadGroupX</code> and <code>threadGroupY</code> determines the number of thread groups. In the end, use <code>Blit</code> to blit the target texutre to the <code>destination</code>. Here we don’t assign the destination, so the texture will be directly blitted to screen.</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">RunShader</span><span class="token punctuation">(</span>RenderTexture destination<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">InitRenderTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RayTracingShader<span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Result"</span><span class="token punctuation">,</span> _target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> threadGroupX <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">8.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> threadGroupY <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">CeilToInt</span><span class="token punctuation">(</span>Screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">8.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RayTracingShader<span class="token punctuation">.</span><span class="token function">Dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> threadGroupX<span class="token punctuation">,</span> threadGroupY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Graphics<span class="token punctuation">.</span><span class="token function">Blit</span><span class="token punctuation">(</span>_target<span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>Invoke <code>OnRenderImage</code>.</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnRenderImage</span><span class="token punctuation">(</span>RenderTexture source<span class="token punctuation">,</span> RenderTexture destination<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RunShader</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>Click the play button and you will see a beautiful fractal!</li></ol><p><img src="https://ww1.yunjiexi.club/2019/12/19/5BJLg.png" alt></p><hr><p>&nbsp;</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>So far, I hope you’ve already learned what a compute shader is and how to execute it. The whole contents are very simple except for a tricky stuff, that is to efficiently organize the threads. </p><p>GPU can be treated as a set of stream proccessors (abbreviated as SP). A SP executes a thread group at a time. So you may want to make sure that you have less number of thread groups than that of SPs. I ran this program on a GPU with 384 SPs, and kept the group size 64 as default. With a high screen resolution, it turned out that more than 384 SPs were needed. So, the program kind of ran slowly. After I increased the group size to $32\times 32$, it became much faster and more fluent. But it is not the larger the groups size is, the better. Since every single thread takes up a specific amount of memory, too many threads may run out of space. So, you should do it really carefully according to your hardwares.</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Graphics Review#3 - Ray Tracing In One Weekend 2 of 2</title>
      <link href="/CG5.html"/>
      <url>/CG5.html</url>
      
        <content type="html"><![CDATA[<p>Last time, we’ve gone through some basic components of a simple offline ray tracing renderer. In this chapter, we will be digging further to make the renderer fancier, which additionally includes dielectric material and a positionable camera.<a id="more"></a></p><hr><h2 id="How-To-Do"><a href="#How-To-Do" class="headerlink" title="How To Do"></a>How To Do</h2><p>In the previous chapter, the two materials, diffuse and metal, only deal with reflection. For the dielectric material, the situation is more complicated because it involves refraction. To better understand, we are going to dig a little bit into some physical issues.</p><h3 id="Refraction"><a href="#Refraction" class="headerlink" title="Refraction"></a>Refraction</h3><p>Dielectric is a physical material, in which electric current is poorly conducted. In another word, it is a electrical insulator. The properties of dielectric is not we are going to talk about. What we are really instrested in here is the refraction phenomenon brought about by a typical dielectric, the glass.</p><p>To some extent, refraction is a bit like reflection, they are both a kind of light ray bending. The difference is that the refraction won’t abruptly change the direction of the ray. So, if refraction happened when a ray hit a surface, the ray would continue to go into the material instead of being reflected back. Basically, refraction is that light bends when it travels from one material to another.</p><p>To trace the ray, we have to know how the ray bends. The <code>Snell&#39;s Law</code> offeres us the answer.</p><p><img src="https://ww1.yunjiexi.club/2019/11/12/72bea7c25c50caeda1169b79a91f1547.png" alt></p><p>The mathematical formula form is:</p><p>$$n\sin\theta = n’\sin\theta’ $$</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">refract</span><span class="token punctuation">(</span><span class="token keyword">const</span> vec3<span class="token operator">&amp;</span> v<span class="token punctuation">,</span> <span class="token keyword">const</span> vec3<span class="token operator">&amp;</span> n<span class="token punctuation">,</span> <span class="token keyword">float</span> ni_over_nt<span class="token punctuation">,</span> vec3<span class="token operator">&amp;</span> refracted<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// normalize the incident ray vector</span>    vec3 uv <span class="token operator">=</span> <span class="token function">unit_vector</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value of cosθ</span>    <span class="token keyword">float</span> dt <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>uv<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// value of square of cosθ'</span>    <span class="token keyword">float</span> discriminant <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">-</span> ni_over_nt <span class="token operator">*</span> ni_over_nt <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> dt <span class="token operator">*</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// incident ray comes obliquely and refraction takes place</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>discriminant <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// direction of the refracted ray</span>        refracted <span class="token operator">=</span> ni_over_nt <span class="token operator">*</span> <span class="token punctuation">(</span>v <span class="token operator">-</span> n <span class="token operator">*</span> dt<span class="token punctuation">)</span> <span class="token operator">-</span> n <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>discriminant<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// incident ray comes perpendicularly thus no refraction</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Mentioned in previous chapter of <code>BRDF</code>, we have to take into account the fresnel while processing reflection. The Schilck approximation is what we are going to use.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">float</span> <span class="token function">schilck</span><span class="token punctuation">(</span><span class="token keyword">float</span> cosine<span class="token punctuation">,</span> <span class="token keyword">float</span> ref_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> r0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> ref_idx<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> ref_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    r0 <span class="token operator">=</span> r0 <span class="token operator">*</span> r0<span class="token punctuation">;</span>    <span class="token keyword">return</span> r0 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> r0<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> cosine<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">scatter</span><span class="token punctuation">(</span><span class="token keyword">const</span> ray<span class="token operator">&amp;</span> r_in<span class="token punctuation">,</span> <span class="token keyword">const</span> hit_record<span class="token operator">&amp;</span> rec<span class="token punctuation">,</span> vec3<span class="token operator">&amp;</span> attenution<span class="token punctuation">,</span> ray<span class="token operator">&amp;</span> scattered<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    vec3 outward_normal<span class="token punctuation">;</span>    vec3 reflected <span class="token operator">=</span> <span class="token function">reflect</span><span class="token punctuation">(</span>r_in<span class="token punctuation">.</span><span class="token function">direction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rec<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> ni_over_nt<span class="token punctuation">;</span>    attenution <span class="token operator">=</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec3 refracted<span class="token punctuation">;</span>    <span class="token keyword">float</span> reflect_prob<span class="token punctuation">;</span>    <span class="token keyword">float</span> cosine<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>r_in<span class="token punctuation">.</span><span class="token function">direction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rec<span class="token punctuation">.</span>normal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        outward_normal <span class="token operator">=</span> <span class="token operator">-</span>rec<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>        ni_over_nt <span class="token operator">=</span> ref_idx<span class="token punctuation">;</span>        cosine <span class="token operator">=</span> ref_idx <span class="token operator">*</span> <span class="token function">dot</span><span class="token punctuation">(</span>r_in<span class="token punctuation">.</span><span class="token function">direction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rec<span class="token punctuation">.</span>normal<span class="token punctuation">)</span> <span class="token operator">/</span> r_in<span class="token punctuation">.</span><span class="token function">direction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        outward_normal <span class="token operator">=</span> rec<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>        ni_over_nt <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">/</span> ref_idx<span class="token punctuation">;</span>        cosine <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">dot</span><span class="token punctuation">(</span>r_in<span class="token punctuation">.</span><span class="token function">direction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rec<span class="token punctuation">.</span>normal<span class="token punctuation">)</span> <span class="token operator">/</span> r_in<span class="token punctuation">.</span><span class="token function">direction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">refract</span><span class="token punctuation">(</span>r_in<span class="token punctuation">.</span><span class="token function">direction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> outward_normal<span class="token punctuation">,</span> ni_over_nt<span class="token punctuation">,</span> refracted<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        reflect_prob <span class="token operator">=</span> <span class="token function">schlick</span><span class="token punctuation">(</span>cosine<span class="token punctuation">,</span> ref_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        scattered <span class="token operator">=</span> <span class="token function">ray</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>p<span class="token punctuation">,</span> reflected<span class="token punctuation">)</span><span class="token punctuation">;</span>        reflect_prob <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">/</span> <span class="token number">10000.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> reflect_prob<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        scattered <span class="token operator">=</span> <span class="token function">ray</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>p<span class="token punctuation">,</span> reflected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        scattered <span class="token operator">=</span> <span class="token function">ray</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>p<span class="token punctuation">,</span> refracted<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Positionable-Camera"><a href="#Positionable-Camera" class="headerlink" title="Positionable Camera"></a>Positionable Camera</h3><p><img src="https://i.postimg.cc/y8FcJQZS/Camera.png" alt></p><p>It is not that difficult to create a positionable camera, you just have to do some vector calculations.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token function">camera</span><span class="token punctuation">(</span>vec3 lookfrom<span class="token punctuation">,</span> vec3 lookat<span class="token punctuation">,</span> vec3 vup<span class="token punctuation">,</span> <span class="token keyword">float</span> vfov<span class="token punctuation">,</span> <span class="token keyword">float</span> aspect<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        vec3 u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>        <span class="token keyword">float</span> theta <span class="token operator">=</span> vfov <span class="token operator">*</span> M_PI <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> half_height <span class="token operator">=</span> <span class="token function">tan</span><span class="token punctuation">(</span>theta <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> half_width <span class="token operator">=</span> aspect <span class="token operator">*</span> half_height<span class="token punctuation">;</span>        origin <span class="token operator">=</span> lookfrom<span class="token punctuation">;</span>        w <span class="token operator">=</span> <span class="token function">unit_vector</span><span class="token punctuation">(</span>lookfrom <span class="token operator">-</span> lookat<span class="token punctuation">)</span><span class="token punctuation">;</span>        u <span class="token operator">=</span> <span class="token function">unit_vector</span><span class="token punctuation">(</span><span class="token function">cross</span><span class="token punctuation">(</span>vup<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> <span class="token function">cross</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>        lower_left_corner <span class="token operator">=</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token operator">-</span>half_width<span class="token punctuation">,</span> <span class="token operator">-</span>half_height<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lower_left_corner <span class="token operator">=</span> origin <span class="token operator">-</span> half_width <span class="token operator">*</span> u <span class="token operator">-</span> half_height <span class="token operator">*</span> v <span class="token operator">-</span> w<span class="token punctuation">;</span>        horizontal <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> half_width <span class="token operator">*</span> u<span class="token punctuation">;</span>        vertical <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> half_height <span class="token operator">*</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><hr><p>&nbsp;</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>Look at the beautiful scene!</p><p><img src="https://i.postimg.cc/zXsQG82q/camera.png" alt></p><hr><p>&nbsp;</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>I don’t intend to make a complete tutorial because I’m also a learner. I highly recommend you to read the origianl book because, as I said before, it is a very practical book to get you into the ray tracing world. You may find out that this book is easy but don’t worry. This book is just one of the trilogy of ray tracing wrote by the same author. You can continuously read another two to learn something much more complicated. Hope you have fun and embrace the joy of ray tracing.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Ray Tracing In One Weekend - Peter Shirley</p>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Graphics Review#3 - Ray Tracing In One Weekend 1 of 2</title>
      <link href="/CG4-RayTracing.html"/>
      <url>/CG4-RayTracing.html</url>
      
        <content type="html"><![CDATA[<p>Ray tracing was put forth in last century and has been used in film industry for decades. Even though it is a good way to achieve <code>Global Illumination</code>, it is not used in video games yet because games are realtime, the high computational cost of ray tracing makes it diffult and appropriate for games. However, as Nvidia introduced a new series of advanced graphics cards, which completely changed the situation, realtime ray tracing finally makes it to the game industry.<a id="more"></a></p><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>What is ray tracing?</p><p>Simply saying, ray tracing is a rendering technique that simulates the process of natural light formation in real life in a reverse way. In the real world, a light ray emitted by a light source goes directly or bounces into our eyes. If we start at the light source to trace all the light rays, work can be complicated since we have to deal with every hit created by the intersection between a light ray and an object and there can be millions of objects and light rays in a large scene. A viable solution is to do this in a reverse way: virtual camera (our eyes) emits a ray. Then the ray goes through the screen and hit an object, and finally we transform the light effect of the hit point to screen color.</p><p><img src="https://i.postimg.cc/JhkHqdQm/ray-tracing.png" alt></p><p>In the first episode of my review, I briefly talked about a rendering pipeline, which is called raster rendering: it treats objects as geometries formed by a bunch of triangles and map these triangles onto screen pixels along with their color information. It apply some lighting models to approximately shade the scene, which cannot reach the best photorealistic effect. Ray tracing apply an approach conforming to physics, leading to a much more beautiful outcome.</p><hr><p>&nbsp;</p><h2 id="How-To-Do"><a href="#How-To-Do" class="headerlink" title="How To Do"></a>How To Do</h2><p>I get into the ray tracing field with the help of <strong><em>Ray Tracing In One Weekend</em></strong>. It is a really good book, helping you learn how to do ray tracing rendering step by step from the very begining in a practical way. The author gives out all the code in detail, so I will not do that again here. What I mainly want to do is to write down some stuff in the book that I think is worth discussing.</p><h3 id="Ray-Presentation"><a href="#Ray-Presentation" class="headerlink" title="Ray Presentation"></a>Ray Presentation</h3><p>We use parametric form to present a ray: $p(t) = A + t*B$. A stands for the origin of the ray, and B stands for the direction of the ray (unit vector in most of cases).</p><p><img src="https://i.postimg.cc/FzB5ZTKj/ray.png" alt></p><p>Assume that we are going to render a picture in size of $200\times 100$. We already know that the origin (position of the virtual camera) is at $(0, 0, 0)$, to figure out the direction, we can simply find a point on the canvas and use the position as the direction vector remaining to be normalized. In this case, the direction will be:</p><pre class=" language-cpp"><code class="language-cpp">vec3 <span class="token function">lower_left_corner</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec3 <span class="token function">horizontal</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec3 <span class="token function">vertical</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nx <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">int</span> ny <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> ny <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">float</span> u <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>nx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> v <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>ny<span class="token punctuation">)</span><span class="token punctuation">;</span>        vec3 direction <span class="token operator">=</span> lower_left_corner <span class="token operator">+</span> u <span class="token operator">*</span> horizontal <span class="token operator">+</span> v <span class="token operator">*</span> vertical<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>In this way, we can figure out every ray from the camera to the pixels.</p><h3 id="Intersection"><a href="#Intersection" class="headerlink" title="Intersection"></a>Intersection</h3><p>We will take sphere as an example to illustrate how to calculate intersections.</p><p>In graphics, we definitely want all the stuff to be in the form of vectors, which makes calculations much easier. Assume that the center of the sphere is at $(cx, cz, cy)$. It is easy for us to know that the formula of the sphere is: $(x-cx)(x-cx) + (y-cy)(y-cy) + (z-cz)(z-cz) = R*R$. If you were familiar with vector, you could easily tell that the left part of the formula is a dot product of two vectors, $(x-cx, y-cy, z-cz)$ and $(x-cx, y-cy, z-cz)$. Make the sphere center $c$ and the points on the sphere $p$, so the formula will be:</p><p>$$(p-c)\cdot (p-c) = R*R$$</p><p>If a ray intersected with the sphere at a point, the point would satisfy both formula, so we  put the ray formula in to the sphere’s:</p><p>$$(A+t\ast B-c)(A+t\ast B-c) = R*R$$</p><p>Expand it:</p><p>$$t^2B\cdot B+2t(A-C)\cdot (A-C)+C\cdot C-R\ast R = 0$$</p><p>Apparently, this is a quadratic equation with an unknown $t$. By judging its discriminant, we can therefore tell if the ray intersects with the sphere. If the discriminant is less than $0$, the ray do not intersect with and tangent to the sphere; if equals to $0$, the ray tangent to the sphere; if larger than $0$, the ray intersects with the sphere at two points.</p><p>Additionally, we may need the normals of the hitpoints. The calculation is simple: the hitpoint minus the center. We can use the quadratic formula to figure out the $t$ and then get the position. With the position, we can get the normal.</p><h3 id="Antialiasing"><a href="#Antialiasing" class="headerlink" title="Antialiasing"></a>Antialiasing</h3><p>In this case, the picture we try to render is in relatively low resolution, so using just one ray to sample a pixel is insufficient, causing the jagged look on the border. A feasible solution is to do multiple samples within the pixel and then blend them. In the code we talked about earlier, we sample the left lower corner of a pixel to shade. We can sample within a pixel by adding an offset within the range from $0$ to $1$. In order to achieve better blend effect, we utilize random generator to better simulate the distribution of the sample rays.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// sample times</span><span class="token keyword">int</span> ns <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> ny <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        vec3 <span class="token function">world_color</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;</span> ns<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">float</span> u <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token function">drand48</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>nx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> v <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token function">drand48</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>ny<span class="token punctuation">)</span><span class="token punctuation">;</span>            world_color <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">color</span><span class="token punctuation">(</span><span class="token function">ray</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        world_color <span class="token operator">/</span><span class="token operator">=</span> ns<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Diffuse-Material"><a href="#Diffuse-Material" class="headerlink" title="Diffuse Material"></a>Diffuse Material</h3><p>A diffuse color modulate its surrounding color with its intrinsic color. Light rays that reflect off a diffuse surface have their direction randomized. We’ve talked about this in previous episodes of BRDF. Because of the existence of subsurfaces, the reflected light rays are barely uniform. The random ray direction can be determined in this way: pick a random poitn $s$ from the unit sphere tangent to the hitpoint, and send a ray from the hitpoint $p$ to the random point $s$. This sphere has center $(p+N)$.</p><p><img src="https://i.postimg.cc/1Rp4cDBF/unit-sphere.png" alt></p><p>A rejection method is used to pick a random point in that unit sphere: first, pick a random point in the unit cube where $x$, $y$, and $z$ all range from $-1$ to $1$. We reject this point and try again if the point is outside the sphere.</p><p>To figure out the direction of the reflected ray, we cannot simply apply $s-p$ since p is in the coordinates whose origin is at the virtual camera position while the s is in the coordinates whose origin is at the center of the unit sphere. First, we have to find out the vector from camera origin to the unit sphere center, then add it to the vector from the center to the random point.</p><pre class=" language-cpp"><code class="language-cpp">vec3 target <span class="token operator">=</span> rec<span class="token punctuation">.</span>p <span class="token operator">+</span> rec<span class="token punctuation">.</span>normal <span class="token operator">+</span> <span class="token function">random_in_unit_sphere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Finally we can figure out the reflected ray and apply iteration to keep tracing.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">return</span> <span class="token function">color</span><span class="token punctuation">(</span><span class="token function">ray</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>p<span class="token punctuation">,</span> target <span class="token operator">-</span> rec<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Gamma-Correction"><a href="#Gamma-Correction" class="headerlink" title="Gamma Correction"></a>Gamma Correction</h3><p>The relation between actual illuminance and eye perception is different from that between actual illuminance and camera perception. It is obvious in the picture below that when in a dark environment, human eyes are more sensitive to the illuminance variance, making us see clearer in the dark. So actually, the picture rendered is darker than we see in real life. To make it more realistic, we have to apply gamma correction.</p><p><img src="https://i.postimg.cc/BZyrCXcM/gamma.png" alt></p><p>Assume that the actual illumiance is $i$, illuminance perceived by eyes is $i_e$, illuminance perceived by camera is $i_c$:</p><p>$$i_e = i^{\frac{1}{2.2}}$$</p><p>$$i_c = i$$</p><p>We can round it up to $2$, so the relation between $i_e$ and $i_c$ is simple as below:</p><p>$$i_e = i_c^{\frac{1}{2}}$$</p><p>It means that we can get a more accurate color by combining the square roots of its three components.</p><pre class=" language-cpp"><code class="language-cpp">world_color <span class="token operator">=</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>world_color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>world_color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>world_color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Metal-Material"><a href="#Metal-Material" class="headerlink" title="Metal Material"></a>Metal Material</h3><p>Compared to the diffuse material, the reflected ray bounceing off the metal surface is not random.</p><p><img src="https://i.postimg.cc/vBD7WQVb/reflect.png" alt></p><p>Derived from the graph:</p><p>$$reflected = v - 2\ast (v\cdot n)\ast n$$</p><hr><p>&nbsp;</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>So far, we have a very good rendered picture already.</p><p><img src="https://i.postimg.cc/pr3t2XDT/result.png" alt></p><hr><p>&nbsp;</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>It’s so amazing, isn’t it? With just a little code, we can consummate an offline ray tracing renderer with high quality. I just finished part of the book, there are still some insteresting contents remaining to be discovered. Keep up with the author, build up my own code, and try to solve and write down some problems. I think I’ve learned a lot through this process. I will keep on doing.</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Ray Tracing In One Weekend - Peter Shirley<br>[2] <a href="https://www.cambridgeincolour.com/tutorials/gamma-correction.htm" target="_blank" rel="noopener">Gamma Correction</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Lab - Non-Euclidean Space</title>
      <link href="/UnityLab1.html"/>
      <url>/UnityLab1.html</url>
      
        <content type="html"><![CDATA[<p>I’ve recently been seeing some very intriguing videos about non-euclidean space and thinking about achieving that in Unity. I created a scene with two tunnels, a long one and a short one. The long tunnel looks long outside but looks short (as short as the short tunnel is) inside and takes a short period of time to travel through (the same amount of time needed to travel through the short tunnel). The situation is totally converse for the short tunnel.</p><a id="more"></a><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>What is a non-euclidean space?</p><p>Indeed, this is a really tricky concept that I cannot clarify since I am no mathematical specialist and it is not my purpose here to dig into that. So I am just going to simply explain that and show how it works in a particular case.</p><p>You’ve possibly heard about <code>wormhole</code>. Pretty much like that, the non-euclidean is a curved space. Imagine that there are two dots distant from each other on a piece of paper. If we folded that peice of paper, we could make those two dots adjacent. In the case above, let’s take the long tunnel as an example: the two ends of the tunnel is distant when looked from outside while they are much nearer when looked from inside.</p><hr><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><div class="owl-media owl-video owl-youtube"><iframe src="//www.youtube.com/embed/91RyYekoQW4" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div><hr><h2 id="How-To-Do"><a href="#How-To-Do" class="headerlink" title="How To Do"></a>How To Do</h2><p>This is not a difficult task, and all you need is a canny solution:</p><ol><li>You need two cameras that synchronous in position and rotation and keep them in front of different tunnels, for example, one in front of the long tunnel, the other in front of the short tunnel and vice versa. Put a plane at the ends of the tunnels. And then apply a render texture to the plane to render what’s now been saw by the other camera. So, if you standed in front the long tunnel, you would see the inside of the short tunnel.</li></ol><div class="note warning">            <p>Simple synchronization is not practical here. Imagine that you are now facing the front end of the short tunnel, the synchronous camera is facing the front end of the long tunnel. If you walk to the back end of the short tunnel, the same movement is applied to the synchronous camera, it may intersect with long tunnel wall! One possible solution to this problem is that add the offset between your camera and the end you face to the other corresponding end’s transform, and assign the sum to the synchronous camera as its transform.</p>          </div><ol start="2"><li>Portal your character. It is not enough for the tunnels to looks non-euclidean. They have to offer a non-euclidean commute experience inside. So, when walks into the long tunnel, you have to transfer your character to the inside of the short tunnel. And when the character walks out, transfer it back.</li></ol><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I saw a video talking about non-euclidean space days ago, the maker displayed several fancy and intriguing scenes which really fascinate me. He created his own non-euclidean space renderer in OpenGL, I was encourged to try it in Unity, although I only created a simple scene instead of a renderer. Even though my description of the process is simple and short, I did encounter some challenges. For example, the render texture I created was a little distorted and did not fit the plane. I finally found a viable approach in another video to cope with that, which is to use a screen space shader.</p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://www.youtube.com/watch?v=kEB11PQ9Eo8" target="_blank" rel="noopener">Non-Euclidean Space</a></p><p>[2] <a href="https://www.youtube.com/watch?v=cuQao3hEKfs&t=1080s" target="_blank" rel="noopener">Portal In Unity</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Graphics Review#2 - Lighting 2 of 2</title>
      <link href="/CG3.html"/>
      <url>/CG3.html</url>
      
        <content type="html"><![CDATA[<p>In recent 3D games, you can barely see those poor-shaded props or scenes. They are reaching more and more photorealistic since players now hold a higher standard and the rendering technique has developed a lot. A significant part of this is <code>PBR</code>, which simulates the physical properties of light in rendering to achieve realistic effects.</p><a id="more"></a><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Last time, we talked about several commonly used lighting models in computer graphics. They are experience-based models, creating simple and unreal lighting effects. And this time we are going to learn about a much more realistic rendering technique: <code>PBR, Physically-Based Rendering</code>. It is more or less based on some theories that resembles the physical principles in the real world, but still, it is just an approximation of lighting in the real world. And this is why we call it physically-based rendering instead of physcal rendering. For a PBR lighting model, there are 3 preconditions:</p><ul><li>Microfacet Model</li><li>Energy Conservation</li><li>Physically-based BRDF</li></ul><p>We will go through these one by one.</p><hr><p>&nbsp;</p><h2 id="Microfacet-Model"><a href="#Microfacet-Model" class="headerlink" title="Microfacet Model"></a>Microfacet Model</h2><p>This theory descirbes that any surface at a microscopic scale can be described by tiny little perfectly reflective mirrors called <code>microfacets</code>. According to the roughness of a surface the alignment of these tiny mirrors can differ quite a lot:</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/09de3044e3848c766efa8599711d2e1c.png" alt title="From LearnOpenGL.com"></p><p>The effect of these tiny-like mirror alignments is that when specifically talking about specular lighting/reflection the incoming light rays are more likely to scatter along completely different directions on rougher surfaces, resulting in a more widespread specular reflection. In contrast, on a smooth surface the light rays are more likely to reflect in roughly the same direction, giving us smaller and sharper reflections:</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/0396206cefbf6d01de3e11b896f67549.png" alt title="From LearnOpenGL.com"></p><p>No surface is completely smooth on a microscopic level, but seeing as these microfacets are small enough that we can’t make a distinction between them on a per-pixel basis we statistically approximate the surface’s microfacet roughness given a roughness parameter. Based on the roughness of a surface we can calculate the ratio of microfacets roughly aligned to some vector $\vec h$. This vector $\vec h$ is the halfway vector that sits halfway between the light $\vec l$ and view $\vec v$ vector. We’ve discussed the halfway vector before in the blinn-phong lighting model which is calculated as the sum of $\vec l$ and $\vec v$ divided by its length:</p><p>$$ \vec h = \frac{\vec l + \vec v}{|\vec l + \vec v|} $$</p><p>The more the microfacets are aligned to the halfway vector, the sharper and stronger the specular reflection. Together with a roughness parameter that varies between 0 and 1 we can statistically approximate the alignment of the microfacets.</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/853b7d94518429f935bedd650787edde.png" alt title="From LearnOpenGL.com"></p><hr><p>&nbsp;</p><h2 id="Energy-Conservation"><a href="#Energy-Conservation" class="headerlink" title="Energy Conservation"></a>Energy Conservation</h2><p>Energy conservation describes that the energy of outgoing light rays never exceed that of the incoming light rays. As we can see in the picture above, as the roughness inceases,  the area of reflectance increases but the brightness goes down.</p><p>For energy conservation to hold we need to make a clear distinction between diffuse and specular light. We’ve covered this last time when we talked about the scattering. When a light ray hits a surface, it breaks into a reflection part and a refraction part. The reflection part is the part that doesn’t go inside the object, which we call specular specular lighting. While the refraction part goes under the surface and is partially absorbed, which we call diffuse lighting.</p><p>Physically, we are going to have a deeper look at the “<strong>partial absorption</strong>“. A light ray can be regarded as a beam of energy that keeps moving forward until it loses all its energy, and it loses its energy by colliding with other molecules. All materials consist of innumerable tiny molecules, and these molecules absorb all or part of a light ray’s energy when they collide and turn them into heat. Generally, not all energy is absorbed, and the light ray keeps moving until the energy is totally aborbed or finds another way out the surface. If the light ray is not completely absorbed and finally moves out, it participates in forming the surface’s color, and this is what we call diffuse color.</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/b4d7351fbb1870822d5417c6f0904e7e.png" alt title="From LearnOpenGL.com"></p><p>Furthermore, for metallic materials, all refracted lights are completely absorbed and not rescattered out of the surface. So, metallica materials don’t dispaly a diffuse color.</p><p>Based on the distinction between the reflection and refraction, we can conclude that the reflected light and the refracted light are mutually exclusive. We can calculate the total energy of reflected light and the rest goes to refracted light.</p><hr><p>&nbsp;</p><h2 id="Reflectance-Equation"><a href="#Reflectance-Equation" class="headerlink" title="Reflectance Equation"></a>Reflectance Equation</h2><p>To thoroughly understand the reflectance equation, we have to involve a little bit of <strong>Radiometry</strong>.</p><p>$$ L_o(p,\ w_o) = \int_{\Omega}^{ }{f_r(p,\ w_i,\ w_o)L_i(p,\ w_i)n \cdot w_idw_i} $$</p><p>This does look very scary at the beginning, but as we gradually analyze it, I believe we will figure it out. We go through some terms first.</p><p><strong>Radiant flux</strong>: radiant flux $\Phi$ is the transmitted energy of a light source measured in Watts. Light is a collective sum of energy over multiple different wavelengths, each wavelength associated with a particular visible color. The emitted energy of a light source are therefore be thought of as a function of all its different wavelengths. The radiant flux measures the total area of this function of different wavelengths. Directly taking this measure of wavelengths as input in computer graphics is slightly impractical so we often make the simplification of representing radiant flux not as a function of varing wavelength strengths, but as a light color triplet encoded as RGB. This encoding does come at quite a loss of information, but this is generally negligible for visual aspects.</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/f86e5a1db8ebf85f091819e37fc6af19.png" alt title="From LearnOpenGL.com"></p><p><strong>Solid angle</strong>: solid angle is represented by $\omega$, describing the size or area of a shape projected onto a unit sphere. The area of the projected shape onto this unit sphere is known as the <code>solid angle</code>. You can visualize the solid angle as a direction with volume:</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/7e0c3e88ed6b9447de5fcb44d075320e.png" alt title="From LearnOpenGL.com"></p><p>Thinking of being an observer at the center of this unit sphere and looking in the direction of the shape, and the size of the silhouette you make out of it is the solid angle.</p><p><strong>Radiant intensity</strong>: radiant intensity measures the amount of radiant flux per solid angle or the strength of a light source over a projected area onto the unit sphere. For instance, given an omnidirectional light that radiates equally in all directions the radiant intensity can give us its energy over a specific area:</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/d3dc7234c156a8ac9e40f48f0e57d1a3.png" alt title="From LearnOpenGL.com"></p><p>The equation to describe the radiant intensity is defined as follows:</p><p>$$ I = \frac{d\Phi}{d\omega} $$</p><p>Where $I$ is the radiant flux $\Phi$ over the solid angle $\omega$.</p><p>With knowledge of radiant flux, radiant intensity and the solid angle we can finally describe the equation for radiance, which is described as the total observed energy over an area $A$ over the solid angle $\omega$ of a light of radiant intensity $\Phi$:</p><p>$$ L = \frac{d^2\Phi}{dAdwcos\theta} $$</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/e6337d3182318a194fa1109251dbf9d9.png" alt title="From LearnOpenGL.com"></p><p>If we consider the solid angle $\omega$ and the area $A$ to be infinitely small, we can us radiance to measure the flux of a single ray of light hitting a single point. This relation allows us to calculate the radiance of a single light ray influencing a single fragment. We effectively translate the solid angle $\omega$ into a direction vector $\omega$, and $A$ into a point $p$. This way we can directly use radiance in our shaders to calculate a single light ray’s per-fragment contribution.</p><p>In fact, when it comes to radiance we generally care about all incoming light onto a point p which is the sum of all radiance known as irradiance. With knowledge of both radiance and <code>irradiance</code> we can get back to the reflectance equation:</p><p>$$ L_o(p,\ w_o) = \int_{\Omega}^{ }{f_r(p,\ w_i,\ w_o)L_i(p,\ w_i)n \cdot w_idw_i} $$</p><p>We now know that L in the render equation represents the radiance of some point p and some incoming infinitely small solid angle ωi which can be thought of as an incoming direction vector $ω_i$. Remember that $cos\theta$ scales the energy based on the light’s incident angle to the surface which we find in the reflectance equation as $n\cdot ω_i$. The reflectance equation calculates the sum of reflected radiance $L_o(p,\ ω_o)$ of a point $p$ in direction $ω_o$ which is the outgoing direction to the viewer. Or to put it differently: $L_o$ measures the reflected sum of the lights’ irradiance onto point $p$ as viewed from $ω_o$.</p><hr><p>&nbsp;</p><h2 id="BRDF"><a href="#BRDF" class="headerlink" title="BRDF"></a>BRDF</h2><p>The <code>BRDF</code>, or <code>bidirectional reflective distribution function</code> is a function that takes as input the incoming light direction $w_i$, the outgoing view direction $w_o$, the surface normal $n$ and a surface parameter $a$ that represents the microsuface’s roughness. The BRDF approximates how much each individual light ray ωi contributes to the final reflected light of an opaque surface given its material properties.</p><p>A BRDF approximates the material’s reflective and refractive properties based on the previously discussed microfacet theory. For a BRDF to be physically plausible it has to respect the law of energy conservation i.e. the sum of reflected light should never exceed the amount of incoming light. Technically, Blinn-Phong is considered a BRDF taking the same ωi and ωo as inputs. However, Blinn-Phong is not considered physically based as it doesn’t adhere to the energy conservation principle. There are several physically based BRDFs out there to approximate the surface’s reaction to light. However, almost all real-time render pipelines use a BRDF known as the <code>Cook-Torrance BRDF</code>.</p><p>The Cook-Torrance BRDF contains both a diffuse and specular part:</p><p>$$ f_r = k_df_{lambert} + k_sf_{cook-torrance} $$</p><p>Here $k_d$ is the earlier mentioned ratio of incoming light energy that gets refracted with $k_s$ being the ratio that gets reflected. The left side of the BRDF states the diffuse part of the equation denoted here as $f_{lambert}$. This is known as <code>lambertian diffuse</code> similar to what we used for diffuse shading which is a constant factor denoted as:</p><p>$$ f_{lambert} = \frac{c}{\pi} $$</p><p>With $c$ being the albedo or surface color (think of the diffuse surface texture). The divide by $\pi$ is there to normalize the diffuse light as the earlier denoted integral that contains the BRDF is scaled by $\pi$.</p><div class="note warning">            <p>You might wonder how this Lambertian diffuse relates to the diffuse term we’ve been using before: the surface color multiplied by the dot product between the surface’s normal and the light direction. The dot product is still there, but moved out of the BRDF as we find $n\cdot ω_i$ at the end of the $L_o$ integral.</p>          </div><p>There exist different equations for the diffuse part of the BRDF which tend to look more realistic, but are also more computationally expensive. As concluded by Epic Games however, the Lambertian diffuse is sufficient enough for most real-time rendering purposes.</p><p>The specular part of the BRDF is a bit more advanced and is described as:</p><p>$$ f_{cook-torrance} = \frac{DFG}{4(w_o\cdot n)(w_i\cdot n)} $$</p><p>The Cook-Torrance specular BRDF consists of three functions and a normalization factor in the denominator. Each of the D, F and G symbols represent a type of function that approximates a specific part of the surface’s reflective properties. These are defined as the normal <strong>D</strong>istribution function, the <strong>F</strong>resnel equation and the <strong>G</strong>eometry function:</p><ul><li><p><strong>Normal distribution function</strong>: approximates the amount of the surface’s microfacets are aligned to the halfway vector influenced by the roughness of the surface; this is the primary function approximating the microfacets.</p></li><li><p><strong>Geometry function</strong>: describes the self-shadowing property of the microfacets. When a surface is relatively rough the surface’s microfacets can overshadow other microfacets thereby reducing the light the surface reflects.</p></li><li><p><strong>Fresnel equation</strong>: the Fresnel equation describes the ratio of surface reflection at different surface angles.</p></li></ul><p>Each of these functions is an approximation of their physics equivalents and you’ll find more than one version of each one that aims to approximate the underlying physics; some more realistic, others more efficient. It is perfectly allowed to pick whatever approximated version of these functions you want to use. Brian Karis from Epic Games did a good deal of research on the multiple types of approximations here. We’re going to pick the same functions used by Epic Game’s Unreal Engine 4 which are the Trowbridge-Reitz GGX for D, the Fresnel-Schlick approximation for F and the Smith’s Schlick-GGX for G.</p><p>&nbsp;</p><h3 id="Normal-Distribution-Function"><a href="#Normal-Distribution-Function" class="headerlink" title="Normal Distribution Function"></a>Normal Distribution Function</h3><p>The normal distribution function D statistically approximates the relative surface area of microfacets exactly aligned to the halfway vector h. There are a multitude of NDFs defined that statistically approximate the general alignment of the microfacets given some roughness parameter and the one we’ll be using is known as the Trowbridge-Reitz GGX:</p><p>$$ NDF_{GGXTR}(n,\ h,\ \alpha) = \frac{\alpha^2}{\pi((n\cdot h)^2(\alpha^2 - 1) + 1)^2} $$</p><p>Here $h$ is the halfway vector to measure against the surface’s microfacets, with $\alpha$ being a measure of the surface’s roughness. If we take $h$ as the halfway vector between the surface normal and light direction over varying roughness parameters we get the following visual result:</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/853b7d94518429f935bedd650787edde.png" alt title="From LearnOpenGL.com"></p><p>&nbsp;</p><h3 id="Geometry-Function"><a href="#Geometry-Function" class="headerlink" title="Geometry Function"></a>Geometry Function</h3><p>The geometry function statistically approximates the relative surface area where its micro surface-details overshadow each other causing light rays to be occluded.</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/a45ac0bdf558d97dfeaf37208dc39d18.png" alt title="From LearnOpenGL.com"></p><p>Similar to the NDF, the Geometry function takes a material’s roughness parameter as input with rougher surfaces having a higher probability of overshadowing microfacets. The geometry function we will use is a combination of the GGX and Schlick-Beckmann approximation known as Schlick-GGX:</p><p>$$ G_{SchlickGGX}(n,\ v,\ k) = \frac{n\cdot v}{(n\cdot v)(1 - k) + k} $$</p><p>Here $k$ is a remapping of $\alpha$ based on whether we’re using the geometry function for either direct lighting or IBL lighting:</p><p>$$ k_{direct} = \frac{(\alpha + 1)^2}{8} $$</p><p>$$ k_{IBL} = \frac{\alpha^2}{2}$$</p><p>To effectively approximate the geometry we need to take account of both the view direction and the light direction vector. We can take both into account using <code>Smith&#39;s method</code>:</p><p>$$G(n,\ v,\ l,\ k) = G_{SchlickGGX}(n,\ v,\ k)G_{SchlickGGX}(n,\ l,\ k)$$</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/25a799dfa08709cb908ce0d269af2c85.png" alt title="From LearnOpenGL.com"></p><p>The geometry function is a multiplier between $[0.0, 1.0]$ with white or $1.0$ measuring no microfacet shadowing and black or $0.0$ complete microfacet shadowing.</p><p>&nbsp;</p><h3 id="Fresnel-Equation"><a href="#Fresnel-Equation" class="headerlink" title="Fresnel Equation"></a>Fresnel Equation</h3><p>The Fresnel equation describes the ratio of light that gets reflected over the light that gets refracted, which varies over the angle we’re looking at a surface. The moment light hits a surface, based on the surface to view angle the Fresnel equation tells us the percentage of light that gets reflected. From this ratio of reflection and the energy conservation principle we can directly obtain the refracted portion of light from its remaining energy.</p><p>Every surface or material has a level of base <code>reflectivity</code> when looking straight at its surface, but when looking at the surface from an angle all reflections become more apparent compared to the surface’s base reflectivity. You can check this for yourself by looking at your presumably wooden/metallic desk which has a certain level of base reflectivity from a perpendicular view angle, but by looking at your desk from an almost 90 degree angle you’ll see the reflections become much more apparent. All surfaces theoretically fully reflect light if seen from perfect 90-degree angles. This phenomenon is known as <code>Fresnel</code> and is described by the Fresnel equation.</p><p>The Fresnel equation is a rather complex equation, but luckily the Fresnel equation can be approximated using the Fresnel-Schlick approximation:</p><p>$$ F_{Schlick}(h,\ v,\ F_0) = F_0 + (1 - F_0)(1 - (h\cdot v))^5 $$</p><p>$F_0$ represents the base reflectivity of the surface, which we calculate using something called the indices of refraction or IOR and as you can see on a sphere surface, the more we look towards the surface’s grazing angles the stronger the Fresnel and thus the reflections:</p><p><img src="https://ww1.yunjiexi.club/2019/08/26/72c18072ac770568970d7a677dfe4e71.png" alt title="From LearnOpenGL.com"></p><p>There are a few subtleties involved with the Fresnel equation. One is that the Fresnel-Schlick approximation is only really defined for dielectric or non-metal surfaces. For conductor surfaces, calculating the base reflectivity using their indices of refraction doesn’t properly hold and we need to use a different Fresnel equation for conductors altogether. As this is inconvenient we further approximate by pre-computing the surface’s response at normal incidence, at a 0 degree angle as if looking directly onto a surface, and interpolate this value based on the view angle as per the Fresnel-Schlick approximation such that we can use the same equation for both metals and non-metals.</p><pre class=" language-cpp"><code class="language-cpp">vec3 F0 <span class="token operator">=</span> <span class="token function">vec3</span><span class="token punctuation">(</span><span class="token number">0.04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>F0 <span class="token operator">=</span> <span class="token function">mix</span><span class="token punctuation">(</span>F0<span class="token punctuation">,</span> surfaceColor<span class="token punctuation">.</span>rgb<span class="token punctuation">,</span> metalness<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="Cook-Torrance-Reflectance-Equation"><a href="#Cook-Torrance-Reflectance-Equation" class="headerlink" title="Cook-Torrance Reflectance Equation"></a>Cook-Torrance Reflectance Equation</h2><p>With every component of the Cook-Torrance BRDF described we can include the physically based BRDF into the now final reflectance equation:</p><p>$$L_o(p,\ w_o) = \int_{\Omega}^{ }{(k_d\frac{c}{\pi} + k_s\frac{DFG}{4(w_o\cdot n)(w_i\cdot n)})L_i(p,\ w_i)n\cdot w_idw_i}$$</p><p>This equation is however not fully mathematically correct. You may remember that the Fresnel term $F$ represents the ratio of light that gets reflected on a surface. This is effectively our ratio $k_s$, meaning the specular part of the reflectance equation implicitly contains the reflectance ratio $k_s$. Given this, our final final reflectance equation becomes:</p><p>$$L_o(p,\ w_o) = \int_{\Omega}^{ }{(k_d\frac{c}{\pi} + \frac{DFG}{4(w_o\cdot n)(w_i\cdot n)})L_i(p,\ w_i)n\cdot w_idw_i}$$</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://learnopengl.com" target="_blank" rel="noopener">LearnOpenGL</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Graphics Review#2 - Lighting 1 of 2</title>
      <link href="/CG2-Lighting.html"/>
      <url>/CG2-Lighting.html</url>
      
        <content type="html"><![CDATA[<p>You cannot imagine what the world would look like if there were no lights since in the real world, they are everywhere. The universal existence of light means that we have deal with it in the 3D scene if we want it to look natural. So, here I’m going to learn something about how light works in computer graphics.</p><a id="more"></a><hr><h2 id="How-We-Perceive-Colors"><a href="#How-We-Perceive-Colors" class="headerlink" title="How We Perceive Colors"></a>How We Perceive Colors</h2><p>Physically, lights propagate in media as form of waves. This is supported by the <code>Young&#39;s Double-Slit Interference Experiment</code>.</p><blockquote><p>For more information, you can check it out <a href="https://opentextbc.ca/physicstestbook2/chapter/youngs-double-slit-experiment/" target="_blank" rel="noopener">here</a>.</p></blockquote><p>As waves, they have unique wavelengths. The lights we can see with naked eyes, the visible lights, have wavelengths within the range from $380\ nm$ to $780\ nm$.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/88594962adbb74e75bd95a40b5bafe09.jpg" alt></p><p>An opaque object can reflect and absorb lights of specific wavelengths. Simply, if it reflects green lights, wavelengths of around $500\ nm$, and absorb any other lights, the object looks greenish. Similarly, a red object reflects most of the red lights and absorbs other lights. More specially, a white object reflects all visible lights while a black one absorb most of them.</p><p>&nbsp;</p><h3 id="Light-Source"><a href="#Light-Source" class="headerlink" title="Light Source"></a>Light Source</h3><p>Lights don’t just come from nowhere, they are generated by light sources, like the sun or light bulbs. In a rendering system, we regard a light source as a single point without volume. And we use different vectors to present different light directions.</p><p>&nbsp;</p><h3 id="Scattering-and-Absorption"><a href="#Scattering-and-Absorption" class="headerlink" title="Scattering and Absorption"></a>Scattering and Absorption</h3><p>When a light ray hit an object, scattering and absorption happen.</p><p>Scatter only changes the light’s direction whil absorption only has its impact on light’s density and color. When a light ray is scattered, it breaks into two parts: one is scattered outward, which is called <code>reflection</code>, the other is scattered inward which is called <code>refraction</code>. For an opaque object, the refracted light ray will bounce between the molecules inside the object and go out in another place. This kind of emergent light ray holds different direction and color to the incident light ray.</p><p>To distinguish these two emergent light rays, we use different method to simulate them in a lighting model. We use <code>Specular</code> to indicate how an object reflects light, and use <code>Diffuse</code> to how many lights are refracted and rescattered out of the object.</p><p>&nbsp;</p><h3 id="Shading"><a href="#Shading" class="headerlink" title="Shading"></a>Shading</h3><p>Shading is to figure out the <code>exitance</code> in a specific viewing direction with an euqation based on material properties and lighting information. The equation is also called <code>Lighting Model</code>.</p><hr><p>&nbsp;</p><h2 id="Standard-Lighting-Model"><a href="#Standard-Lighting-Model" class="headerlink" title="Standard Lighting Model"></a>Standard Lighting Model</h2><p>In a standard lighting model which is nonphysical, we take 4 ingredients that contribute to shading. <code>Emissive</code>, <code>Diffuse</code>, <code>Specular</code>, and <code>Ambient</code>.</p><ul><li><p>Emissive: indicates how many lights this object itself will emit in a given direction. Notice that without GI, this kind of emissive lights won’t shed any lights on the environment. It just makes itself look glowing.</p></li><li><p>Ambient: simulates the indirect lights, and it is constant for simplicity.</p></li></ul><p>&nbsp;</p><h3 id="Lambert-Lighting-Model"><a href="#Lambert-Lighting-Model" class="headerlink" title="Lambert Lighting Model"></a>Lambert Lighting Model</h3><p>Lambert lighting model is a simple and common way to simulate diffuse color of a rough surface. It is experience-based, depending on the fragment normal and the light direction.</p><p>$$ Diffuse = k_d \times Color \times LightColor \times max(0,\ \vec N \cdot \vec V_{light}) $$</p><p>The $k_d$ is a constant describing the object’s diffuse property.</p><p>$$ Ambient = k_d \times AmbientColor $$</p><p>And the final lamber lighting model is:</p><p>$$ Diffuse + Ambient $$</p><p>&nbsp;</p><h3 id="Half-Lambert-Lighting-Model"><a href="#Half-Lambert-Lighting-Model" class="headerlink" title="Half Lambert Lighting Model"></a>Half Lambert Lighting Model</h3><p>Half lambert lighting is innovated by Valve Corporation when they were developing game <code>Half Life</code>. In a dark environment where the diffuse light is weak or the diffuse light is hard to reach, the dot product can be negative. And with the $max$ operation, the dot product remains 0, which means the object’s diffuse color is very dark.</p><p>It is absolutely bad for a game, making player hard to see things in the dark. So Valve substituted a new equation for the former one:</p><p>$$ Diffuse = k_d \times Color \times LightColor \times ((\vec N \cdot \vec V_{light}) \times 0.5 + 0.5) $$</p><p>It maps the dot product onto $[0,\ 1]$ instead of $[-1,\ 1]$, and successfully solves the problem.</p><p>&nbsp;</p><h3 id="Phong-Lighting-Model"><a href="#Phong-Lighting-Model" class="headerlink" title="Phong Lighting Model"></a>Phong Lighting Model</h3><p>For a piece of paper or a wood log in a simple project, lambert or half lambert can be a good choice which is simple and effcient. However, when it comes to metalls, glasses, or any other reflecting material, they start to be unreal. Because these materials shows specular effects in some ways. If you’d ever observed some materials’ reflections, you would have seen an area filled with intensive white light which makes you hard to see the object’s original color. And that area changes as you change the direction you look at it.</p><p>So, we can tell that the specular highlight not only has something to do with the reflected light, but also the viewing direction.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/f9526b2dd82e4777f9af3e99af423fc7.png" alt title="From LearnOpenGL.com"></p><p>$$ \vec R = 2 \times (\vec V_{light} \cdot \vec N) \times \vec N - \vec V_{light} $$</p><p>$$ Specular = k_s \times LightColor \times max(0,\ (\vec R \cdot \vec V_{view}))^{Shininess} $$</p><p>The $k_s$ is a constant describing the material’s specular property. The $Shininess$, also called $Glossiness$, indicates how shiny the object is or how smooth the object is.</p><p>Finally, the phong lighting model is like:</p><p>$$ Ambient + Diffuse + Specular $$</p><blockquote><p>Inplementing the phong lighting model in a vertex shader is called gourand shading.</p></blockquote><p>&nbsp;</p><h3 id="Blinn-Phong-Lighting-Model"><a href="#Blinn-Phong-Lighting-Model" class="headerlink" title="Blinn-Phong Lighting Model"></a>Blinn-Phong Lighting Model</h3><p>Blinn proposed an alternative for specular to avoid calculating reflected vector, which is more efficient. He introduced a new vector called <code>halfway vector</code>:</p><p>$$ \vec h = \frac{\vec V_{view} + \vec V_{light}}{|\vec V_{view} + \vec V_{light}|} $$</p><p>$$ Specular = k_s \times LightColor \times max(0,\ (\vec h \cdot \vec N))^{Shininess} $$</p><p>Now we’ve finished the standard lighting model!</p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We went through some concepts and basic lighting models. They are not complicated, but really good for us to learn about how we simulate a light phenomenon in a rendering system. Next time we will be talking about PBR, physically-based rendering, which is also called PBS, physically-base shading. It is very sophisticated so we have to extract it out. See you!</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://learnopengl.com" target="_blank" rel="noopener">LearnOpenGL</a></p><p>[2] <a href="https://opentextbc.ca/physicstestbook2/chapter/youngs-double-slit-experiment" target="_blank" rel="noopener">Young’s Double-Slit Interference</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#4 - Binary Tree 2 of 4</title>
      <link href="/DataStructureJourney4.html"/>
      <url>/DataStructureJourney4.html</url>
      
        <content type="html"><![CDATA[<p><code>Binaru Search Tree</code> is a special form of binary tree designed to perform search tasks efficiently. It is similar to performing binary search on an array list. We’ve already known that a list that can be applied to binary search has to be quatitatively ordered (ascendingly or descendingly). So, there is a specific requirement on the positions of elements in a binary search tree.</p><a id="more"></a><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>You may have heard of <code>binary search</code>. If you are searching for an item among an sorted array using binary search, it starts with checking the equality of the search value $K$ and the middle value of the array $K_m$. If they equal, the processing immediately stops. If the $K &gt; K_m$, then it goes to check the equality of the $K$ and the middle value among the subarray consisting of all the item on the right of the $K_m$, or on the left for the case $K &lt; K_m$. And keep doing this until the match is found.</p><div class="note warning">            <p>A significant thing here is that the array on which the binary search is performed must be sorted, whatever ascendingly or descendingly.</p>          </div><p>Let’s get back and focus on binary tree. You’ve known that it consists of a root node, a left child node, and a right childe node. If the contents in these nodes have a specific relationship in magnitude, for example, $K_l &lt; K_r \leq K_r$, it is just like a sorted array in a binary tree form. By a relationship like this, we come up with a binary tree on which a binary search can be performed, and it is called <code>binary search tree</code>.</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/189619d051e0e73cb50fd29de2026d59.png" alt title="Binary Search Tree"></p><hr><p>&nbsp;</p><h2 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h2><p>We defined a tree node structure last time, and we are going to use it to finish the binary search tree class. In the definition of the node class, we applied <code>template</code>. And in that template are two types of parameter: one for search key, the other for the contents of data. Applying a search key is important, because in some cases, the data structure we aim to process can be complicated, like a staff including an ID, a name, an age, a phone number, a vocation, an address, etc. In most cases, we don’t know all of them precisely, if we do, we don’t have to search for it. So we can make the ID a search key, and find the match to get all the rest. Since the binary tree is organized by magnitude, the search keys have to be comparable.</p><p>Say that we are making a game, and there are bunch of weapons in the game. Each weapon has its own ID, name, and damage. Here we take the ID as a search key.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Weapon<span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> damage<span class="token punctuation">;</span>    <span class="token function">Weapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Weapon</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> string nam<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dam<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        index <span class="token operator">=</span> idx<span class="token punctuation">;</span>        name <span class="token operator">=</span> nam<span class="token punctuation">;</span>        damage <span class="token operator">=</span> dam<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><p>We use a method called recursion to process insertion.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Insert a node to a specific position by its index</span>    Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> node<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> root<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span><span class="token function">Insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetRight</span><span class="token punctuation">(</span><span class="token function">Insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">InsertNode</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> node<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p>Recursion is also applied in searching.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Find a node matching the index, return the first node if multiple matches are found</span>    Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> idx<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> idx<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Find</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">Find</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><p>Deletion of a node is much more complicated. If a node only has a left child or a right child, we can replace it with the left child or the right child when it is removed. However, the situation will be more sophisticated when a node to be deleted has two children and even the children have their own children. In this case, we cannot simply replace it, we also have to reconstruct the subtree to make them put on correct positions to meet the binary tree requirement.</p><p>Let’s take a look at this case:</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/2c77382ecac4f11bdd641744b33f6f89.png" alt></p><p>We are going to delete the node containing $67$. How can we reconstruct the subtree whose root node is $67$, a node waiting to be removed? Let’s first make this clear: a subtree formed by certain nodes can be very different. So here are two solutions:</p><ol><li>Replace the node with the most left node in its right subtree.</li><li>Replace the node with the most right node in its left subtree.</li></ol><p>Here, we use the first solution, and process and result are presented in the picture above. If you choose the second one, you should replace the $67$ with the $59$, and set its right child to $79$. Now let’s take a further look, what if the most left node has a right child?</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/7828d7ef5f6238f71e8c1c3b45532117.png" alt></p><p>As a matter of fact, it won’t make much difference. In the case above, we assign the deleted node’s parent, left child, and right child to the replacing node. And in this case, for the deleted node’s right child we perform a insertion: insert it into the subtree taking the replacing node as its root. The insertion will automatically put the right child to the correct position. Like what’s presented in the picture above, the $79$ is automatically set as $77$ right child. Should we perform a insertion on the left child of the deleted node? The answer is absolutely no, we don’t have to do that. Because we choose the most left childe node of the deleted node’s right subtree as the replacing node, a most left node has no left child, so we can simply assign.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Delete a node by its index</span>    Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Find the node to be deleted</span>        Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> target <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Make sure that the node you want to remove is present</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Find the replacing node</span>            Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">FindLeft</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Reconstruct the subtree</span>            temp<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetParent</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetRight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                root <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Disconnect the node we want to delete</span>            target<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetParent</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetRight</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p>&nbsp;</p><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p>I’ve constructed a binary search tree like this:</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/f4bdb350b2b5b4809ac3e9206d2c276b.png" alt></p><p>Now we delete the root node holding $100$. According to the deletion and reconstruction scheme we talked about, the $110$ will take place of it. And the $120$ will be set as the right child of the $115$. So if we try to get access to the right child of $115$, it should print out the information of $120$.</p><pre class=" language-cpp"><code class="language-cpp">BSTree tree<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create and insert nodes</span><span class="token comment" spellcheck="true">// .....</span>tree<span class="token punctuation">.</span><span class="token function">DeleteNode</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> result <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">FindNode</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/11/18f81b1c9c7a006fa67eaff7e6afe42e.png" alt></p><p><img src="https://ww1.yunjiexi.club/2019/08/11/f32068702133c12769b5af0fc75df982.png" alt></p><p>We succeed! You can check the complete source code <a href="https://github.com/PokhoOfSCUT/DataStructureReview/tree/master/BinarySearchTree/BinarySearchTree" target="_blank" rel="noopener">here</a>.</p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Binary search tree is a very important application of binary tree. It is very efficient for a structure on which frequent search operations are performed. For your own damands, you can add a modification function to change the contents or other functions like deletion of the minimum node or the maximum node. And the deletion and reconstruction scheme I offered is just one of the feasible solutions, since the result subtree forms vary, you can figure out you own solution. Next time we will talk about another application of binary tree. See you!</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#3 - Binary Tree 1 of 4</title>
      <link href="/DataStructureJourney3.html"/>
      <url>/DataStructureJourney3.html</url>
      
        <content type="html"><![CDATA[<p>Compared to <code>List</code> structure, <code>Binary Tree</code> can be relatively tricky. It arranges its elements in a tree form: one element has two children elements, just like the buds on a branch generates another two children twigs. With this type of structure, we can perform some tasks more efficiently.</p><a id="more"></a><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>A <code>binary tree</code> is made up of a finite set of elements called <code>nodes</code>. This set either is empty or consists of a node called the <code>root</code> together with two binary trees, called the left and right <code>subtrees</code>. The roots of these subtrees are childeren of the root.</p><p><img src="https://ww1.yunjiexi.club/2019/08/08/6b583c11b31171fec41032cf5bdde131.png" alt></p><p>Binary tree is widely used, and it permits both efficient access and update to large collections of data. Apart from organizing and searching, it is also applied for many things, like prioritizing jobs, describing mathematical expressions and the syntactic elements of computer programs, etc.</p><hr><p>&nbsp;</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p><img src="https://ww1.yunjiexi.club/2019/08/08/7722f93a9165c20a1d383b66ff886b6b.png" alt></p><p>This is a graph presenting a simple binary tree. The lines between nodes are called <code>edges</code>. Say $N_1$, $N_2$, and $N_5$ is a sequence of nodes, and they are in an order from ancestor to descendant, then this sequence is called a <code>path</code> from $N_1$ to $N_5$. And the length of the path is the number of the edges in the path, which is, in this case, 2. The <code>depth</code> of a node in the tree is the length of the path from the root of the tree to the node itself. For instance, the node $N_4$ holds a depth of 2, while the $N_1$, the root of the tree, holds a depth of 0. The <code>height</code> of a node is 1 more than its depth.</p><p>The node without any child node which, in another word, has two empty children is called a <code>leaf</code> node. A node that has at least one non-empty child is called <code>internal</code> node.</p><p>&nbsp;</p><h3 id="Full-amp-Complete-Binary-Tree"><a href="#Full-amp-Complete-Binary-Tree" class="headerlink" title="Full &amp; Complete Binary Tree"></a>Full &amp; Complete Binary Tree</h3><p>A <code>full binary tree</code> is a tree in which each node is a internal node with two children or a leaf. A <code>complete binary tree</code> is a tree that each level of it is filled from left to right.</p><p><img src="https://ww1.yunjiexi.club/2019/08/09/d624bcafe56836d926b253b253a656a7.png" alt></p><div class="note info">            <p>Theorem:</p><ol><li>The number of empty subtrees in a non-empty binary tree is one more than the number of nodes in the tree.</li><li>The number of leaves in a non-empty full binary tree is one more than the number of internal nodes.</li></ol>          </div><hr><p>&nbsp;</p><h2 id="Binary-Tree-Traversals"><a href="#Binary-Tree-Traversals" class="headerlink" title="Binary Tree Traversals"></a>Binary Tree Traversals</h2><p>We will never use a data structure just for storing something, instead we definitely want to retrieve some of them later. For a binary tree, we sometimes just want to get access to a specific node. But in some cases, we may want to visit all nodes in order. There are 3 types traversals for a binary tree: <code>preorder</code>, <code>inorder</code>, and <code>postorder</code>. Literally, we can tell that the difference between them is the time when the root node of a tree or a subtree is visited.</p><p>&nbsp;</p><h3 id="Preorder-Traversal"><a href="#Preorder-Traversal" class="headerlink" title="Preorder Traversal"></a>Preorder Traversal</h3><p>In preorder traversal, the root node of a tree or a subtree is the first node to be visited, prior to its left and right children. And then the left child node is visited, the right child node is the last one. When a preorder traversal is carried on, we first visit the root node of the tree, and if it has a non-empty left child, visit it. And next, we do the same thing to the subtree whose root node is this left child. Not until all the left nodes are visited, we start with the right ones.</p><p><img src="https://ww1.yunjiexi.club/2019/08/09/d16034a8470ca5010987ddffc94af60b.png" alt></p><p>So, the result of the preorder traversal on the above tree will be:</p><p>$$ ABDHIEJCFG $$</p><p>&nbsp;</p><h3 id="Inorder-Traversal"><a href="#Inorder-Traversal" class="headerlink" title="Inorder Traversal"></a>Inorder Traversal</h3><p>In inorder traversal, the root of a tree or a subtree is the second node to be visited, right behind the left the child. When we carry on an inorder traversal, we first check if the root has a non-empty left child. If did, we don’t visit its left child but check it until we reach the most left child and visit this child. And then visit its parent, and check the left child of the parent’s right child and repeat. This may be a little bit confusing. If you don’t catch on, just read few more times along with the result:</p><p>$$  HDIBJEAFCG $$</p><p>&nbsp;</p><h3 id="Postorder-Traversal"><a href="#Postorder-Traversal" class="headerlink" title="Postorder Traversal"></a>Postorder Traversal</h3><p>For now, the definition of postorder travsersal should be clear to you after going through the previous two traversals: visit a root after you complete visiting its left child and right child. If a root has a non-empty left child, we keep checking until we reach the most left child and visit it. Then do the same thing to the right child of the same level, and finally visited the parent. The corresponding result will be like:</p><p>$$ HIDJEBFGCA $$</p><hr><p>&nbsp;</p><h2 id="Binary-Tree-Node"><a href="#Binary-Tree-Node" class="headerlink" title="Binary Tree Node"></a>Binary Tree Node</h2><p>Finally the coding time! Let’s define a struct for the binary tree node, preparing for the upcoming practical tree structures.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> Key<span class="token punctuation">,</span> <span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Key k<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The node's key</span>    E e<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The node's value</span>    Node<span class="token operator">*</span> lc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Left child</span>    Node<span class="token operator">*</span> rc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Right child</span>    Node<span class="token operator">*</span> parent<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        lc <span class="token operator">=</span> rc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Key kVal<span class="token punctuation">,</span> E eVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        k <span class="token operator">=</span> kVal<span class="token punctuation">;</span>        e <span class="token operator">=</span> eVal<span class="token punctuation">;</span>        parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        lc <span class="token operator">=</span> rc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set and return parent node</span>    <span class="token keyword">void</span> <span class="token function">SetParent</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        parent <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token operator">*</span> <span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Return the contents of the node</span>    E<span class="token operator">&amp;</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set the value of the node</span>    <span class="token keyword">void</span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> eVal<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e <span class="token operator">=</span> eVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Get the key</span>    Key<span class="token operator">&amp;</span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set the key</span>    <span class="token keyword">void</span> <span class="token function">SetKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> kVal<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> kVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set and return left child</span>    <span class="token keyword">void</span> <span class="token function">SetLeft</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> l<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        lc <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token operator">*</span> <span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> lc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set and return right child</span>    <span class="token keyword">void</span> <span class="token function">SetRight</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rc <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token operator">*</span> <span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> rc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check if this is a leaf node</span>    <span class="token keyword">bool</span> <span class="token function">IsLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>lc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Binary tree is a really tricky one compared to what we’ve went through before and it is widely used, so it is important for you to learn about it. This time we clarified some basic properties of binary tree and had a look at 3 types of the tree traversals. And in the end, we completed the node structure for our next challenge. The most difficult part for most of you may be the traversals. However, what I’m going to tell you is that it is not that hard to understand, and it will even be easier when we code them next time.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Data Structure &amp; Algorithm Analysis in C++ - Clifford A. Shafter</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#4 - A Real Custom Editor</title>
      <link href="/UnityEditorDev4.html"/>
      <url>/UnityEditorDev4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>We’ve covered some basic concepts required in Unity editor extension, and this time, we are going make a real custom editor with some practical functionalities. If you are not familiar with the concepts yet, you are free to check them out in the previous chapters. And make sure you do some coding while reading, because this just helps you better understand.</p><a id="more"></a><hr><p>&nbsp;</p><h2 id="Get-Start"><a href="#Get-Start" class="headerlink" title="Get Start"></a>Get Start</h2><h3 id="Create-A-Editor-Window"><a href="#Create-A-Editor-Window" class="headerlink" title="Create A Editor Window"></a>Create A Editor Window</h3><p>When you create a window, do not forget:</p><ol><li>Use <code>UnityEditor</code> namespace, because the class must derive from <code>EditorWindow</code>.</li><li>Window display function has to be static.</li><li>Use <code>MenuItem</code> to make sure you can open the window in the toolbar.</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Primitive-Spawn"><a href="#Primitive-Spawn" class="headerlink" title="Primitive Spawn"></a>Primitive Spawn</h3><p>This function allows us to create a primitive in edit mode with custom position and material color. First, we should define some variables:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">enum</span> Primitive<span class="token punctuation">{</span>    CUBE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    SPHERE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    PLANE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">bool</span> primitiveHeader <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// State of the header control</span><span class="token keyword">private</span> string primitiveString <span class="token operator">=</span> <span class="token string">"Primitive Spawn"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Header display string</span><span class="token keyword">private</span> Primitive primitive<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// EnumPopup control</span><span class="token keyword">private</span> <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// X component of the spawning position</span><span class="token keyword">private</span> <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Y component of the spawning position</span><span class="token keyword">private</span> <span class="token keyword">float</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Z component of the spawning position</span><span class="token keyword">private</span> Color primitiveColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Custom default color</span></code></pre><p>Then, we can start drawing UI items:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    primitiveHeader <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFoldoutHeaderGroup</span><span class="token punctuation">(</span>primitiveHeader<span class="token punctuation">,</span> primitiveString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>primitiveHeader<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        primitive <span class="token operator">=</span> <span class="token punctuation">(</span>Primitive<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumPopup</span><span class="token punctuation">(</span><span class="token string">"Primitive: "</span><span class="token punctuation">,</span> primitive<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">FloatField</span><span class="token punctuation">(</span><span class="token string">"X "</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">FloatField</span><span class="token punctuation">(</span><span class="token string">"Y "</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        z <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">FloatField</span><span class="token punctuation">(</span><span class="token string">"Z "</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>        primitiveColor <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span><span class="token string">"Color "</span><span class="token punctuation">,</span> primitiveColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Create"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Vector3 spawnPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>primitive<span class="token punctuation">,</span> spawnPoint<span class="token punctuation">,</span> primitiveColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFoldoutHeaderGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Notice:<br>Since your custom editor can be very versatile and massive, it is always a good practice to keep your functionality-processing code out of the <code>OnGUI</code> to be an independent function. This will help make the <code>OnGUI</code> stay as simple as possible.</p></blockquote><p>Now, we can finish the spawning function:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>Primitive primitive<span class="token punctuation">,</span> Vector3 point<span class="token punctuation">,</span> Color color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>primitive<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> Primitive<span class="token punctuation">.</span>CUBE<span class="token operator">:</span>            GameObject cube <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Cube<span class="token punctuation">)</span><span class="token punctuation">;</span>            cube<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> point<span class="token punctuation">;</span>            cube<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sharedMaterial<span class="token punctuation">.</span>color <span class="token operator">=</span> primitiveColor<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Primitive<span class="token punctuation">.</span>SPHERE<span class="token operator">:</span>            GameObject sphere <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Sphere<span class="token punctuation">)</span><span class="token punctuation">;</span>            sphere<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> point<span class="token punctuation">;</span>            sphere<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sharedMaterial<span class="token punctuation">.</span>color <span class="token operator">=</span> primitiveColor<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Primitive<span class="token punctuation">.</span>PLANE<span class="token operator">:</span>            GameObject plane <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Plane<span class="token punctuation">)</span><span class="token punctuation">;</span>            plane<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> point<span class="token punctuation">;</span>            plane<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sharedMaterial<span class="token punctuation">.</span>color <span class="token operator">=</span> primitiveColor<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Unrecognized Option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Add-Modifier-Functionality"><a href="#Add-Modifier-Functionality" class="headerlink" title="Add Modifier Functionality"></a>Add Modifier Functionality</h3><p>By adding this kind of functionality, we can adjust our present primitives.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">bool</span> modifierHeader <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">private</span> string modifierString <span class="token operator">=</span> <span class="token string">"Primitive Modify"</span><span class="token punctuation">;</span><span class="token keyword">private</span> Color modifierColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span></code></pre><p>We also use <code>FoldoutHeader</code> to organize all our modifying options just like above:</p><pre class=" language-cpp"><code class="language-cpp">modifierHeader <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFoldoutHeaderGroup</span><span class="token punctuation">(</span>modifierHeader<span class="token punctuation">,</span> modifierString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>modifierHeader<span class="token punctuation">)</span><span class="token punctuation">{</span>    EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    modifierColor <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> modifierColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Change Color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ChangeColor</span><span class="token punctuation">(</span>modifierColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Reset"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Destroy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">DestroyPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Destroy All"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">DestroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFoldoutHeaderGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Finish the unitity functions:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ChangeColor</span><span class="token punctuation">(</span>Color color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">"Select first!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span>color <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span>        Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">"Select first!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DestroyPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        GameObject<span class="token punctuation">.</span><span class="token function">DestroyImmediate</span><span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">"Select first!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DestroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var objects <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">FindObjectsOfTypeAll</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>GameObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Selection<span class="token punctuation">.</span>objects <span class="token operator">=</span> objects<span class="token punctuation">;</span>    var all <span class="token operator">=</span> Selection<span class="token punctuation">.</span><span class="token function">GetTransforms</span><span class="token punctuation">(</span>SelectionMode<span class="token punctuation">.</span>Editable <span class="token operator">|</span> SelectionMode<span class="token punctuation">.</span>ExcludePrefab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span><span class="token punctuation">(</span>var item in all<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            GameObject<span class="token punctuation">.</span><span class="token function">DestroyImmediate</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p>&nbsp;</p><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p><img src="https://ww1.yunjiexi.club/2019/08/05/66699ab9584a7ab428271062b190b96b.gif" alt></p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We’ve done an easy but great work! And what you have to know is that Unity editor extension is much more than this. When you start being involved, you may feel like lost and do not know what to do with that. It’s just fine, because you cannot create a custom editor just for a custom editor, you have to figure out what your game project needs. </p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#3 - Editor UI Groups</title>
      <link href="/UnityEditorDev3.html"/>
      <url>/UnityEditorDev3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Last time, we went through some UI controls that can be applied in our custom editor window for specialized functionalities. And this time, we will go further to put up a more advanced technique: <code>Group</code>. <a id="more"></a>This is a technique which allows us to organize a whole bunch of UI elements. For example, with automatic layout, Unity makes every button occupy a single line:</p><p><img src="https://ww1.yunjiexi.club/2019/08/02/2d0bf4d9f87d71f654b9efa5d1ee263b.png" alt></p><p>By using a horizontal group, we can make these buttons evenly stand in the same line:</p><p><img src="https://ww1.yunjiexi.club/2019/08/02/5f5023713c657cc2ae545e9c303b4d0a.png" alt></p><hr><p>&nbsp;</p><h2 id="Intro-and-Usage"><a href="#Intro-and-Usage" class="headerlink" title="Intro and Usage"></a>Intro and Usage</h2><p>Typically, the <code>Group</code> function consists of a beginning part, a ending part, and all the UI controls between them. The beginning part is mostly named <code>Beginxxx</code>, while the ending part is mostly named <code>Endxxx</code>. Same with UI controls, they are also static in the <code>EditorGUILayout</code> class.</p><p>&nbsp;</p><h3 id="BeginHorizontal"><a href="#BeginHorizontal" class="headerlink" title="BeginHorizontal"></a>BeginHorizontal</h3><p><code>BeginHorizontal</code> is what used just now to make two buttons in the same line evenly. You can make anything in the same line, for instance, a button along with a text field, a text field along with a color picker, etc. You can even put 3 or more items together, but always pay attention to the window size. If you organize too many items in the same line and your window width is not enough, it will make it diffcult to identify them clearly.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Back"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Next"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="BeginFadeGroup"><a href="#BeginFadeGroup" class="headerlink" title="BeginFadeGroup"></a>BeginFadeGroup</h3><p><code>BeginFadeGroup</code> can make the area that contains a collection of UI items partially or completely faded. It depends on the value of the parameter it takes. It takes a float within the range from $0$ to $1$, and $0$ means that nothing is faded while $1$ for everything faded.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFadeGroup</span><span class="token punctuation">(</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_Color <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span>m_Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_String <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span>m_String<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFadeGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/bb223a09ab4812a0f8454c5781502755.png" alt></p><p>&nbsp;</p><h3 id="BeginFoldoutHeaderGroup"><a href="#BeginFoldoutHeaderGroup" class="headerlink" title="BeginFoldoutHeaderGroup"></a>BeginFoldoutHeaderGroup</h3><p><code>BeginFoldoutHeaderGroup</code> is useful when your custom editor has a very huge section that force you scroll down a lot to skip it. With BeginFoldoutHeaderGroup, you can just fold the whole section if it it not being used. Just like the header of a component you can easily see in a inspector.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    string m_String<span class="token punctuation">;</span>    Color m_Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fold <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFoldoutHeaderGroup</span><span class="token punctuation">(</span>fold<span class="token punctuation">,</span> <span class="token string">"Panel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fold<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            EditorGUI<span class="token punctuation">.</span>indentLevel<span class="token operator">++</span><span class="token punctuation">;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Color <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span>m_Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_String <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span>m_String<span class="token punctuation">)</span><span class="token punctuation">;</span>            EditorGUI<span class="token punctuation">.</span>indentLevel<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFoldoutHeaderGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/5caa72dd449332dddce343b5d124d1eb.png" alt></p><p>&nbsp;</p><h3 id="BeginScrollView"><a href="#BeginScrollView" class="headerlink" title="BeginScrollView"></a>BeginScrollView</h3><p>I believe that you all have used <code>ScrollView</code> control in UGUI system, <code>BeginScrollView</code> is pretty much the same, offering a display area with bar to scroll to view excess contents.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    Vector2 scrollPos<span class="token punctuation">;</span>    string t <span class="token operator">=</span> <span class="token string">"This is a string inside a Scroll view!"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scrollPos <span class="token operator">=</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginScrollView</span><span class="token punctuation">(</span>scrollPos<span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndScrollView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Add More Text"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" \nAnd this is more text!"</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Clear"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/838afeedefef690522dbd100367da90d.png" alt></p><p>&nbsp;</p><h3 id="BeginToggleGroup"><a href="#BeginToggleGroup" class="headerlink" title="BeginToggleGroup"></a>BeginToggleGroup</h3><p><code>BeginToggleGroup</code> gives a toggle control above the collection of items, and you can determine the availability of the collection with it. If you checke the toggle, the items are available. If not, they are not available.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> posGroupEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> rotGroupEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        posGroupEnabled <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginToggleGroup</span><span class="token punctuation">(</span><span class="token string">"Align position"</span><span class="token punctuation">,</span> posGroupEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndToggleGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rotGroupEnabled <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginToggleGroup</span><span class="token punctuation">(</span><span class="token string">"Align rotation"</span><span class="token punctuation">,</span> rotGroupEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        rot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> rot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> rot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rot<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span> rot<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndToggleGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/97e03b91917d05299e8aa157d95aff42.png" alt></p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Even though we only code couple of lines, but the result is pretty good, we’ve got a very good start. This is just an iceberg of Unity editor, and if you want to create much better one, you can find some open source projects to study their source codes or get on the <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">Unity.com</a> to look through the documentation.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">Unity Documents</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#2 - Editor UI Controls</title>
      <link href="/UnityEditorDev2.html"/>
      <url>/UnityEditorDev2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Last time we learned how create a custom editor window, and in this chapter we are going to add some UI controls that we can interact with to make the window more like a tool.</p><p>Before this, we have to shed light on some concepts first.</p><a id="more"></a><hr><p>&nbsp;</p><h2 id="GUI-vs-EditorGUI"><a href="#GUI-vs-EditorGUI" class="headerlink" title="GUI vs EditorGUI"></a>GUI vs EditorGUI</h2><p>These are 2 important Unity UI API classes. The difference between them is mostly the use case. Simply saying, the <code>GUI</code> is used in the game scene to display UI items, while the <code>EditorGUI</code> is used in editor extension to display UI items in the custom window. When you use them, you have to manually adjust the layout of the UI.</p><p>&nbsp;</p><h2 id="GUILayout-vs-EditorGUILayout"><a href="#GUILayout-vs-EditorGUILayout" class="headerlink" title="GUILayout vs EditorGUILayout"></a>GUILayout vs EditorGUILayout</h2><p>We can regard these two as the wrappers of GUI and EditorGUI, the UI classes with automatic layout. It means you are able to create your UI more efficiently since you don’t have to adjust the layout manually. We will use <code>GUILayout</code> and <code>EditorGUILayout</code> in this chapter.</p><hr><p>&nbsp;</p><h2 id="Intro-and-Usage"><a href="#Intro-and-Usage" class="headerlink" title="Intro and Usage"></a>Intro and Usage</h2><p>The functions to create specific UI items in GUILayout and EditorGUILayout are static, so you can apply them by doing <code>GUILayout.xxx</code> or <code>EditorGUILayout.xxx</code>. More importantly, you have to make sure that you put all these functions witin <code>OnGUI</code> function which is responsible for UI rendering.</p><p>&nbsp;</p><h3 id="CurveField"><a href="#CurveField" class="headerlink" title="CurveField"></a>CurveField</h3><p><code>CurveField</code> is what you use to make a curve field for editing an <a href="https://docs.unity3d.com/ScriptReference/AnimationCurve.html" target="_blank" rel="noopener">AnimationCurve</a>.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Define an variable of AnimationCurve type</span>    AnimationCurve curve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AnimationCurve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Create a curve field</span>        curve <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">CurveField</span><span class="token punctuation">(</span><span class="token string">"Curve"</span><span class="token punctuation">,</span> curve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/980329aff1cbf994ade225410338f284.png" alt></p><p>&nbsp;</p><h3 id="ColorField"><a href="#ColorField" class="headerlink" title="ColorField"></a>ColorField</h3><p><code>ColorFiled</code> is what you can use to make color field with color picker.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Define an variable of Color type</span>    Color color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        color <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/a5b6f83c06e1653b19a163408f9b8b13.png" alt></p><p>&nbsp;</p><h3 id="DelayDoubleField"><a href="#DelayDoubleField" class="headerlink" title="DelayDoubleField"></a>DelayDoubleField</h3><p><code>DelayDoubleField</code> can make a input field for entering doubles. <code>DoubleField</code> holds the similar functionality, but the value is changed right away after the contents in the input field change. As to DelayDoubleField, the value is only changed if the enter is pressed or the focus is moved away.</p><blockquote><p>Notice:<br>Additionally, there are <code>DelayIntField</code>, <code>DelayFloatField</code>, and <code>DelayTextField</code>. They resemble the way of usage, here we only take <code>DelayDoubleField</code> as an example. Check <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">here</a> for more information.</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Define an variable of double type</span>    <span class="token keyword">double</span> speed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        speed <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">DelayDoubleField</span><span class="token punctuation">(</span><span class="token string">"Speed"</span><span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/29ad4137186aca6a93f46e2bf7ad9003.png" alt></p><p>&nbsp;</p><h3 id="EnumFlagsField"><a href="#EnumFlagsField" class="headerlink" title="EnumFlagsField"></a>EnumFlagsField</h3><p>Displays a menu with an option for every value of the enum type when clicked. An option for the value <code>0</code> with name <code>Nothing</code> and an option for the value <code>~0</code> (that is, all bits set) with the name <code>Everything</code> are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.</p><blockquote><p>Notice:<br>This method only supports enums whose underlying types are supported by Unity’s serialization system (sbyte, short, int, byte, ushort, or uint). For enums backed by an unsigned type, the “Everything” option should have the value corresponding to all bits set (i.e. ~0 in an unchecked context or the MaxValue constant for the type).</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">enum</span> ExampleFlagsEnum    <span class="token punctuation">{</span>        None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Custom name for "Nothing" option</span>        A <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>        B <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>        AB <span class="token operator">=</span> A <span class="token operator">|</span> B<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Combination of two flags</span>        C <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>        All <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Custom name for "Everything" option</span>    <span class="token punctuation">}</span>    ExampleFlagsEnum flags<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flags <span class="token operator">=</span> <span class="token punctuation">(</span>ExampleFlagsEnum<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumFlagsField</span><span class="token punctuation">(</span><span class="token string">"Flags"</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/cb313803dc8f7f2e4d31b1e6343ba27a.png" alt></p><p>&nbsp;</p><h3 id="EnumPopup"><a href="#EnumPopup" class="headerlink" title="EnumPopup"></a>EnumPopup</h3><p><code>EnumPopup</code> also display a menu with all values with enum type, but it is not like <code>EnumFlagsField</code>. Only one value can be selected at one time, and any type of combination is prohibited.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">enum</span> Selection<span class="token punctuation">{</span>    Right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">public</span> Selection selection<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selection <span class="token operator">=</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumPopup</span><span class="token punctuation">(</span><span class="token string">"Selection"</span><span class="token punctuation">,</span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/f78dcce0e057985063e0f8074be53f8c.png" alt></p><p>&nbsp;</p><h3 id="Button-amp-Label"><a href="#Button-amp-Label" class="headerlink" title="Button &amp; Label"></a>Button &amp; Label</h3><p><code>Button</code> function is not in <code>EditorGUILayou</code> class, instead of <code>GUILayout</code> class. We’ve known that these two classes are similar in a lot of ways, and they even have some functions in common. However, we usually use EditorGUILayout for the editable UI elements, while for the static ones, we choose GUILayout. But this is not a rule, you can choose not to follow.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">enum</span> Selection<span class="token punctuation">{</span>    Right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">public</span> Selection selection<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selection <span class="token operator">=</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumPopup</span><span class="token punctuation">(</span><span class="token string">"Selection"</span><span class="token punctuation">,</span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">Space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token string">"Switch the enum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>selection <span class="token operator">==</span> Selection<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                selection <span class="token operator">=</span> Selection<span class="token punctuation">.</span>Right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                selection <span class="token operator">=</span> Selection<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Now, you can click the button to switch the selection value.</p><p><img src="https://ww1.yunjiexi.club/2019/07/31/58b42c4b08c706fbc7300879956c5206.png" alt></p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Since there are too many controls, and most of them are so similar to use, so I cut off here. If you’ve coded like above and seen what happened in the Unity, you may noticed that we can interact with those UI controls, but they are not functional. This is because they are not connected with other stuff yet. Next time I will list some examples and continue to put up some advanced UI controls. If you want to learn more, you can check the references.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">Unity Documents</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#1 - The Window Is Born</title>
      <link href="/UnityEditorDev1.html"/>
      <url>/UnityEditorDev1.html</url>
      
        <content type="html"><![CDATA[<p>Unity editor allows you to create your own toolkit in an independent window triggered by the menu bar. It could be really time-saving if you designed a generic editor that could be applied to many other projects. So to be an efficient developer, this kind of skill is what you have to possess.</p><a id="more"></a><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Editor extension allows you to custom your own editor window which is qualified with some specialized functionalities for your project. It is very flexible since you can even make a common editor that can be widely used in many different projects.</p><p><img src="https://ww1.yunjiexi.club/2019/07/30/nRBNh.jpg" alt title="A custom window from unity3d.com"></p><p>And usually, creating a custom editor window involves following steps:</p><ol><li>Create a script that derives from EditorWindow.</li><li>Use code to trigger the window to display itself.</li><li>Implement the GUI code for your tool.</li></ol><hr><p>&nbsp;</p><h2 id="Construct-Your-First-Window"><a href="#Construct-Your-First-Window" class="headerlink" title="Construct Your First Window"></a>Construct Your First Window</h2><h3 id="Create-A-Script"><a href="#Create-A-Script" class="headerlink" title="Create A Script"></a>Create A Script</h3><p>Like what we’ve talked about, we should first create a scripte that derives from <code>EditorWindow</code>. You can name your script whatever you want, just make sure that the class holds the same name. Do not forget <code>using UnityEditor</code>.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEditor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>Since it derives from <code>EditorWindow</code> and doesn’t has to be attached to an object as a component, we can simply remove <code>Start</code> and <code>Update</code>.</p><p>&nbsp;</p><h3 id="Trigger-the-Window"><a href="#Trigger-the-Window" class="headerlink" title="Trigger the Window"></a>Trigger the Window</h3><p>Now we’ve been prepared to build a window.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Let’s go through the parameters one by one:</p><table><thead><tr><th>Parameter</th><th>Intro</th></tr></thead><tbody><tr><td><code>Type</code> t</td><td>The type of the window, must derive from <code>EditorWindow</code></td></tr><tr><td><code>bool</code> utility</td><td>True for utility window, false for normal window</td></tr><tr><td><code>string</code> title</td><td>The title of the window</td></tr><tr><td><code>bool</code> focus</td><td>Whether to give the window focus, if it already exists.</td></tr></tbody></table><blockquote><p>This display function has to be static. Additionally, this function has a bunch of overloaded versions. If you want to know more about them, you can check it out <a href="https://docs.unity3d.com/ScriptReference/EditorWindow.GetWindow.html" target="_blank" rel="noopener">here</a>.</p></blockquote><p>Even though you create a window, you cannot show it off. The way you can trigger the window and show it is to use <code>attribute</code>. To do this, you just have to add a single line of code above the static display function:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Window/Example Window</code> means that you can open this window by clicking the <code>Example Window</code> item which will appear on the popup list of <code>Window</code>.</p><p><img src="https://ww1.yunjiexi.club/2019/07/30/nRtS3.png" alt></p><p><img src="https://ww1.yunjiexi.club/2019/07/30/nR9gS.png" alt></p><p>Here we go!</p><p>&nbsp;</p><h3 id="Advanced-Setup"><a href="#Advanced-Setup" class="headerlink" title="Advanced Setup"></a>Advanced Setup</h3><p>You can get some advanced setup done to better fit your demands after making some changes on the codes above. The following are several simple common examples, <a href="https://docs.unity3d.com/ScriptReference/EditorWindow.GetWindow.html" target="_blank" rel="noopener">here</a> are more for you to find out!</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExampleWindow window <span class="token operator">=</span> <span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span>EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the minimum size of the window</span>        window<span class="token punctuation">.</span>minSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the maximum size of the window</span>        window<span class="token punctuation">.</span>maxSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the position</span>        window<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We have learned how to create a custom editor window in Unity, but it is not appliable now, since it contains nothing but a title and a whole gray panel. We will learn how to add some UI items on it and make use of them. See you guys next time.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://docs.unity3d.com/Manual/editor-EditorWindows.html" target="_blank" rel="noopener">Unity Documents</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Graphics Review#1 - Rendering Pipeline</title>
      <link href="/CG1-RenderingPipeline.html"/>
      <url>/CG1-RenderingPipeline.html</url>
      
        <content type="html"><![CDATA[<p>Rendering pipeline marks the process by which a 3D scene is rendered into a 2D image and put onto the screen. It is very important in computer graphics. Indeed, how it actually works is much more beyond what I’m going to talk about. Here, let’s just make a simple acquaitance.</p><a id="more"></a><hr><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Rendering pipeline converts 3D scene into a 2D image phase by phase with given virtual camera, objects, light sources, textures, etc. We can generally divide it into 3 parts by order:</p><ul><li>Application stage</li><li>Geometry stage</li><li>Rasterization stage</li></ul><p><img src="https://ww1.yunjiexi.club/2019/07/27/nr10M.png" alt></p><hr><p>&nbsp;</p><h2 id="Application-Stage"><a href="#Application-Stage" class="headerlink" title="Application Stage"></a>Application Stage</h2><p>This stage is led by application and done by CPU. Tasks accomplished at this stage are below:</p><ul><li>Load the data from the hard drive into the CPU and do corresponding computations on the data, like collision detection.</li><li>Culling: discard all the objects that aren’t within the frustum and don’t intersect with the frustum.</li><li>Set up render states.</li><li>Draw call.</li></ul><blockquote><p>Notice:</p><ol><li>Render state defines that how a mesh should be rendered —— what shader to use, what material to apply, etc.</li><li>CPU and GPU work independently. How can they communicate? There is something called <code>command buffer</code>. CPU can push some orders into the buffer and GPU retrieve orders from the buffer. Draw call is one of the orders which makes the GPU start rendering a particular frame.</li></ol></blockquote><p>Finally, CPU assigns the primitive type and deliver the data of vertices to the GPU.</p><hr><p>&nbsp;</p><h2 id="Geometry-Stage"><a href="#Geometry-Stage" class="headerlink" title="Geometry Stage"></a>Geometry Stage</h2><p>Geometry stage is a pipeline itself:</p><ol><li>Vertex shader.</li><li>Tesselation shader.</li><li>Geometry shader.</li><li>Clipping.</li><li>Viewport mapping.</li></ol><h3 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h3><p>Vertex shader is scriptable. It is used for transformations and vertex shading.</p><p><img src="https://ww1.yunjiexi.club/2019/07/27/nrbwe.png" alt title="Coordinate System From LearnOpenGL"></p><blockquote><p>Vertex shading is also called <code>Gourand Shading</code>. Get more information about it <a href="https://learnopengl.com/Lighting/Basic-Lighting" target="_blank" rel="noopener">here</a>!</p></blockquote><p>As you see, this process is actually a serie of matrix computations. Vertex shader sequentially carrys on these computatioins on the vertices one by one, converting them from <code>object space</code> into <code>clip space</code>. As to the following part, in fact, they are not parts of vertex shader, OpenGL will help you with that.</p><p>&nbsp;</p><h3 id="Clipping"><a href="#Clipping" class="headerlink" title="Clipping"></a>Clipping</h3><p>You may have noticed that the virtual camera can probably not cover a complete object through the whole transformation process. When this happens, the part outside the frustum will be discarded and then new vertices will be created. This takes place in the projection transformation process.</p><p><img src="https://ww1.yunjiexi.club/2019/07/28/nrprp.png" alt title="Clipping"></p><p>In more detail, when we convert the coordinates from view space into clip space, we have to define a <code>projection matrix</code>. This matrix determines a range of coordinates, for example, $(-1000, 1000)$. Then through the projection transfromation, the coordinates within the range will be mapped onto the <code>NDC (Normalized Device Coordinates)</code> in which the coodinates are within $(-1.0, 1.0)$. A vertex like $(1200, 400, 600)$ will not appear, because its $x$ component is out of range.</p><div class="note warning">            <p>Clipping is kind of different from the culling we’ve mentioned. Culling is like a preprocess, and it discards the objects that are completely outside the frustum, while clipping reconstruct the objects that intersect with the frustum.</p>          </div><p>&nbsp;</p><h3 id="Viewport-Mapping"><a href="#Viewport-Mapping" class="headerlink" title="Viewport Mapping"></a>Viewport Mapping</h3><p>Once in the NDC, the <code>perspective division</code> is carried on. The $x$, $y$, $z$ components are divided by the homogeneous component $w$, and the 4D clip space coordinates are transform into 3D NDC coordinates. And then they are mapped onto screen space as fragments.</p><hr><p>&nbsp;</p><h2 id="Rasterization-Stage"><a href="#Rasterization-Stage" class="headerlink" title="Rasterization Stage"></a>Rasterization Stage</h2><p>This stage goes through 3 sub-stages:</p><ul><li>Triangle Setup</li><li>Triangle Traversal</li><li>Fragment Shader</li></ul><p>&nbsp;</p><h3 id="Triangle-Setup"><a href="#Triangle-Setup" class="headerlink" title="Triangle Setup"></a>Triangle Setup</h3><p>The output from the preceding stage are daata of vertices, for a triangle, they are data of the 3 endpoints.</p><p>&nbsp;</p><h3 id="Triangle-Traversal"><a href="#Triangle-Traversal" class="headerlink" title="Triangle Traversal"></a>Triangle Traversal</h3><p>Triangle traversal is also called <code>scan conversion</code>. It checks if a pixel is covered by a triangle. If it is, then create a <code>fragment</code>. A fragment is something like a prototype of a pixel, which contains a bunch of data like depth and data from geometry stage. If a fragment is at an endpoint of the triangle, it contains the endpoint data, or its data come from interpolations.</p><p>&nbsp;</p><h3 id="Fragment-Shader"><a href="#Fragment-Shader" class="headerlink" title="Fragment Shader"></a>Fragment Shader</h3><p>Use interpolated data as input, carry on corresponding shading computations pixel by pixel, like lighting, texture mapping, etc.</p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This is just an overview of rendering pipeline which mainly goes through some fundamental concepts without any code. Rendering pipeline is a core of computer graphics. It is what you have to know, if you want to be engaged in related fields, and I highly recommend you to study on <a href="https://learnopengl.com" target="_blank" rel="noopener">LearnOpenGL</a> which is a really good online OpenGL tutorial with both concepts and program guide. See you guys next time!</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://learnopengl.com" target="_blank" rel="noopener">LearnOpenGL</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Graphics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#2 - Stack</title>
      <link href="/DataStructureJourney2.html"/>
      <url>/DataStructureJourney2.html</url>
      
        <content type="html"><![CDATA[<p>The <code>List</code> section is finished, but nor is the <code>List</code> iteself. We see a list as an orderly chain of elements, howerver, it can be much more than that. By applying some modifications to it, we can achieve some other intriguing structures like, in this section, a stack.</p><a id="more"></a><hr><h2 id="What-Is-A-Stack"><a href="#What-Is-A-Stack" class="headerlink" title="What Is A Stack"></a>What Is A Stack</h2><p>Stack is a list-like structure in which elements maybe inserted or removed from only one end. It seems that this makes it less practical and less flexible than the lists, but it also makes it easy to implement and more efficient. We call this feature “LIFO” which stands for “Last-In, First-Out”. Simply, the insertion order goes reverse to that of removal.</p><hr><p>&nbsp;</p><h2 id="Stack-ADT"><a href="#Stack-ADT" class="headerlink" title="Stack ADT"></a>Stack ADT</h2><p>Before we define a stack ADT, we have to make something clear. There is only one element in the stack accessible, that is the one on the top of the stack, which we call the <code>top</code> element. The insertion operation on a stack is called <code>push</code>. The removal operation is called <code>pop</code>. And it is worth noticing that we can just pop out the top element.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Reinitialize the stack</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Push an element onto the stack</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Pop out the top element</span>    <span class="token keyword">virtual</span> E <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the top value</span>    <span class="token keyword">virtual</span> <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">TopValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the stack size</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="Stack-Implementation"><a href="#Stack-Implementation" class="headerlink" title="Stack Implementation"></a>Stack Implementation</h2><h3 id="Array-based-Stack-Implementation"><a href="#Array-based-Stack-Implementation" class="headerlink" title="Array-based Stack Implementation"></a>Array-based Stack Implementation</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ArrayStack</span><span class="token operator">:</span> <span class="token keyword">public</span> Stack<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Maximum number of elements the stack can store</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Index for the top element</span>    E<span class="token operator">*</span> listArray<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Array holding the element</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> size <span class="token operator">=</span> defaultSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxSize <span class="token operator">=</span> defaultSize<span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listArray<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> listArray<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">TopValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> listArray<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h3 id="Linked-Stack-Implementation"><a href="#Linked-Stack-Implementation" class="headerlink" title="Linked Stack Implementation"></a>Linked Stack Implementation</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">LinkedStack</span><span class="token operator">:</span> <span class="token keyword">public</span> Stack<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> top<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Pointer to the top element</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The number of element in the stack</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LinkedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">LinkedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> node <span class="token operator">=</span> top<span class="token punctuation">;</span>            top <span class="token operator">=</span> top<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">delete</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> node <span class="token operator">=</span> top<span class="token punctuation">;</span>        E element <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>        top <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">delete</span> node<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">TopValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><div class="note warning">            <ol><li>Here is a very important difference we have to notice between these two implementations. That is the top element in a array-based stack is at the end of the array, while the top element in a linked stack is at the very beginning, although they are both called top element. This kind of design make it easier to implement pushing and popping for both.</li><li>The <code>Node</code> class has been defined last time. Check <a href="/DataStructureJourney1.html" title="here">here</a>!</li></ol>          </div><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>All operations for the two implementations above both take constant time, so as for time aspect, they are equally efficient. The comparison of the total space requried is similar to the lists implementation: the array-based has to be predetermined and fixed, and the linked can flexibly adjust size but requires extra space for pointers.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Data Structure &amp; Algorithm Analysis in C++ - Clifford A. Shafter</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#1 - List</title>
      <link href="/DataStructureJourney1.html"/>
      <url>/DataStructureJourney1.html</url>
      
        <content type="html"><![CDATA[<p>As one of the most fundamental constituents of programming, data structure is something that you have to be familiar with. I decide to go through the contents I learned about data structure again and write them down. And I will start at <code>List</code> structure, maybe the most commonly used data structure.</p><a id="more"></a><hr><h2 id="What-Is-A-List"><a href="#What-Is-A-List" class="headerlink" title="What Is A List"></a>What Is A List</h2><p>List is a finite, ordered sequence of data items. It mathematically resembles set. Generally, all the data items in a list have the same type, but we do have some cases where different types of data items are in the same list.</p><div class="note warning">            <p>The “ordered” here doesn’t mean that the list is sorted by value, it just means that every element in the list has a particular position instead.</p>          </div><p>When a list contains no elements, we call it an <code>empty</code> list. The number of elements that are currently stored in the list is called <code>length</code> of the list. The beginning of the list is called <code>head</code>, while the end of the list is called <code>tail</code>.</p><hr><p>&nbsp;</p><h2 id="List-Operations"><a href="#List-Operations" class="headerlink" title="List Operations"></a>List Operations</h2><p>A list without any operations related to it is meaningless. Before we define a data structure implementation, we should first design some list operations. </p><p>Obviously, a list should be capable of extending and shrinking. For extending, we can simply append an element at the end of the list or insert an element at a particular position. For shrinking, we should remove an element and shift all the elements behind to the head direction. Additionally, we should be able to get access to all the elements in the list for the purpose of retrieving. Although these are just some basic operations, you are free to add some more to make your data structure versatile.</p><p>&nbsp;</p><h3 id="List-ADT"><a href="#List-ADT" class="headerlink" title="List ADT"></a>List ADT</h3><p>ADT is short for <code>abstract data type</code>. It is a realization of a data type as a software component. It contains the logic of data storing and some operations on the data. However, it is just an interface, which is separated from its corresponding implementation, making it possible for users to apply it simply without being stuck on the detail.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Default constructor</span>    <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Destructor</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clear all list contents</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Insert an element at the current position</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Append an element at the end of the list</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Remove and return the current element</span>    <span class="token keyword">virtual</span> E <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set current position to the start of the list</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MoveToHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set current position to the end of the list</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MoveToTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Move the current position to the next</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Move the current position one step left</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the number of the elements</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the current position</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">CurrPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Move to a particular position</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MoveToPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the element</span>    <span class="token keyword">virtual</span> <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="List-Implementation"><a href="#List-Implementation" class="headerlink" title="List Implementation"></a>List Implementation</h2><h3 id="Array-based-List"><a href="#Array-based-List" class="headerlink" title="Array-based List"></a>Array-based List</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">:</span> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Maximum number of elements this list can store</span>    <span class="token keyword">int</span> listSize<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Number of elements this list currently stores</span>    <span class="token keyword">int</span> curr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Current position</span>    E<span class="token operator">*</span> listArray<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Array holding the elements</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> size <span class="token operator">=</span> defaultSize<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// "defaultSize" can be any nonnegative integer</span>        maxSize <span class="token operator">=</span> size<span class="token punctuation">;</span>        listSize <span class="token operator">=</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>        listSize <span class="token operator">=</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span>listSize <span class="token operator">&lt;</span> maxSize<span class="token punctuation">,</span> <span class="token string">"The list is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> listSize<span class="token punctuation">;</span> i <span class="token operator">></span> curr<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            listArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> listArray<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        listArray<span class="token punctuation">[</span>currPos<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        listSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span>listSize <span class="token operator">&lt;</span> maxSize<span class="token punctuation">,</span> <span class="token string">"The list is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listArray<span class="token punctuation">[</span>listSize<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        listSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curr <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>curr <span class="token operator">&lt;</span> listSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Element doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        E tempValue <span class="token operator">=</span> listArray<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> curr<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            listArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> listArray<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        listSize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tempValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MoveToHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MoveToTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>listSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">&lt;</span> listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            curr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            curr<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> listSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">currPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> curr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MoveToPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> listSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Invalid Position!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        curr <span class="token operator">=</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> listArray<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><p>List node implementation:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    E element<span class="token punctuation">;</span>    Node<span class="token operator">*</span> next<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> elementValue<span class="token punctuation">,</span> Node<span class="token operator">*</span> nextNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        element <span class="token operator">=</span> elementValue<span class="token punctuation">;</span>        next <span class="token operator">=</span> nextNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> nextNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> nextNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>Linked list implementation:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">:</span> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> head<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Head of the list</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> tail<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Tail of the list</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> curr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Current node of the list</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Number of the nodes in the list</span>    <span class="token comment" spellcheck="true">// Initializtion</span>    <span class="token keyword">void</span> <span class="token function">Initialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> tail <span class="token operator">=</span> head <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Release store</span>    <span class="token keyword">void</span> <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">delete</span> curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Initialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clear the contents in the list</span>    <span class="token keyword">void</span> <span class="token function">CLear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Initialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Insert an element at current position</span>    <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tail <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Append an element at the end of the list</span>    <span class="token keyword">void</span> <span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        tail <span class="token operator">=</span> node<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Remove and return current element</span>    E <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If the current node is the head node</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            E element <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>            <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> element<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Find the node preceding the current node</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            E element <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> delTemp <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">delete</span> delTemp<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> element<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the start</span>    <span class="token keyword">void</span> <span class="token function">MoveToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the end</span>    <span class="token keyword">void</span> <span class="token function">MoveToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the preceding position</span>    <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the next position</span>    <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">CurrPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to a particular position</span>    <span class="token keyword">void</span> <span class="token function">MoveTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">!=</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> curr<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>These two basic list implementations do have their own pros and cons respectively. For array-based list, it is obvious that the size of it has to be predetermined and it is fixed. While with linked list, you can dynamically adjust the size of the list by inserting or removing nodes, however, it requires more space since a node has to store a pointer to the next node, except for the element. As to the time cost, the array-based list is more time-consuming when it comes to the inserting and removing, because the list has to resort all the elements following, which is not neccessary in the linked list.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Data Structure &amp; Algorithm Analysis in C++ - Clifford A. Shafter</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Hi everybody! Welcome to Rhys’s!</p><p>I’m so glad that I finally manage to build my own blog, and I cannot wait to share with you guys all the interesting stuff. It is not easy for me to start writing blogs, since I am not so qualified and still have much to learn. But writing something and sharing and discussing them with others is also an awesome way to learn, isn’t it?</p><a id="more"></a><p>I really hope that you can get something new from Rhys’s, or just get inspired and come up with some new ideas from things that you’ve been learned about. If you have problems or catch some errors, you can get in touch with me through e-mail. I’m always a listener, a helper and a learner.</p><p>See ya!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
