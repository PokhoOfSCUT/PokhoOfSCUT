<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Computer Graphics Review#2 - Lighting 1 of 2</title>
      <link href="/CG2-Lighting.html"/>
      <url>/CG2-Lighting.html</url>
      
        <content type="html"><![CDATA[<h2 id="How-We-Perceive-Colors"><a href="#How-We-Perceive-Colors" class="headerlink" title="How We Perceive Colors"></a>How We Perceive Colors</h2><p>Physically, lights propagate in media as the form of waves. This is supported by the <strong>Young’s Double-Slit Interference Experiment</strong>.</p><blockquote><p>For more information, you can check it out <a href="https://opentextbc.ca/physicstestbook2/chapter/youngs-double-slit-experiment/" target="_blank" rel="noopener">here</a></p></blockquote><p>As waves, they have unique wavelengths. The lights we can see with naked eyes, the visible lights, have wavelengths within the range from $380\ nm$ to $780\ nm$.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/88594962adbb74e75bd95a40b5bafe09.jpg" alt></p><p>An opaque object can reflect and absorb lights of specific wavelengths. Simply, if it reflects green lights, wavelengths of around $500\ nm$, and absorb any other lights, the object looks greenish. Similarly, a red object reflects most of the red lights and absorbs other lights. More specially, a white object reflects all visible lights while a black one absorb most of them.</p><p>&nbsp;</p><h3 id="Light-Source"><a href="#Light-Source" class="headerlink" title="Light Source"></a>Light Source</h3><p>Lights don’t just come from nowhere, they are generated by light sources, like the sun or light bulbs. In a rendering system, we regard a light source as a single point without volume. And we use different vectors to present different light directions.</p><p>&nbsp;</p><h3 id="Scattering-and-Absorption"><a href="#Scattering-and-Absorption" class="headerlink" title="Scattering and Absorption"></a>Scattering and Absorption</h3><p>When a light ray hit an object, scattering and absorption happen.</p><p>Scatter only changes the light’s direction whil absorption only has its impact on light’s density and color. When a light ray is scattered, it breaks into two parts: one is scattered outward, which is called <strong>reflection</strong>, the other is scattered inward which is called <strong>refraction</strong>. For an opaque object, the refracted light ray will bounce between the molecules inside the object and go out in another place. This kind of emergent light ray holds different direction and color to the incident light ray.</p><p>To distinguish these two emergent light rays, we use different method to simulate them in a lighting model. We use <strong>Specular</strong> to indicate how an object reflects light, and use <strong>Diffuse</strong> to how many lights are refracted and rescattered out of the object.</p><p>&nbsp;</p><h3 id="Shading"><a href="#Shading" class="headerlink" title="Shading"></a>Shading</h3><p>Shading is to figure out the <strong>exitance</strong> in a specific viewing direction with an euqation based on material properties and lighting information. The equation is also called <strong>Lighting Model</strong>.</p><hr><p>&nbsp;</p><h2 id="Standard-Lighting-Model"><a href="#Standard-Lighting-Model" class="headerlink" title="Standard Lighting Model"></a>Standard Lighting Model</h2><p>In a standard lighting model which is nonphysical, we take 4 ingredients that contribute to shading. <strong>Emissive</strong>, <strong>Diffuse</strong>, <strong>Specular</strong>, and <strong>Ambient</strong>.</p><ul><li><p>Emissive: indicates how many lights this object itself will emit in a given direction. Notice that without GI, this kind of emissive lights won’t shed any lights on the environment. It just makes itself look glowing.</p></li><li><p>Ambient: simulates the indirect lights, and it is constant for simplicity.</p></li></ul><p>&nbsp;</p><h3 id="Lambert-Lighting-Model"><a href="#Lambert-Lighting-Model" class="headerlink" title="Lambert Lighting Model"></a>Lambert Lighting Model</h3><p>Lambert lighting model is a simple and common way to simulate diffuse color of a rough surface. It is experience-based, depending on the fragment normal and the light direction.</p><p>$$ Diffuse = k_d \times Color \times LightColor \times max(0,\ \vec N \cdot \vec V_{light}) $$</p><p>The $k_d$ is a constant describing the object’s diffuse property.</p><p>$$ Ambient = k_d \times AmbientColor $$</p><p>And the final lamber lighting model is:</p><p>$$ Diffuse + Ambient $$</p><p>&nbsp;</p><h3 id="Half-Lambert-Lighting-Model"><a href="#Half-Lambert-Lighting-Model" class="headerlink" title="Half Lambert Lighting Model"></a>Half Lambert Lighting Model</h3><p>Half lambert lighting is innovated by Valve Corporation when they were developing game <strong>Half Life</strong>. In a dark environment where the diffuse light is weak or the diffuse light is hard to reach, the dot product can be negative. And with the $max$ operation, the dot product remains 0, which means the object’s diffuse color is very dark.</p><p>It is absolutely bad for a game, making player hard to see things in the dark. So Valve substituted a new equation for the former one:</p><p>$$ Diffuse = k_d \times Color \times LightColor \times ((\vec N \cdot \vec V_{light}) \times 0.5 + 0.5) $$</p><p>It maps the dot product onto $[0,\ 1]$ instead of $[-1,\ 1]$, and successfully solves the problem.</p><p>&nbsp;</p><h3 id="Phong-Lighting-Model"><a href="#Phong-Lighting-Model" class="headerlink" title="Phong Lighting Model"></a>Phong Lighting Model</h3><p>For a piece of paper or a wood log in a simple project, lambert or half lambert can be a good choice which is simple and effcient. However, when it comes to metalls, glasses, or any other reflecting material, they start to be unreal. Because these materials shows specular effects in some ways. If you’d ever observed some materials’ reflections, you would have seen an area filled with intensive white light which makes you hard to see the object’s original color. And that area changes as you change the direction you look at it.</p><p>So, we can tell that the specular highlight not only has something to do with the reflected light, but also the viewing direction.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/f9526b2dd82e4777f9af3e99af423fc7.png" alt title="From LearnOpenGL.com"></p><p>$$ \vec R = 2 \times (\vec V_{light} \cdot \vec N) \times \vec N - \vec V_{light} $$</p><p>$$ Specular = k_s \times LightColor \times max(0,\ (\vec R \cdot \vec V_{view}))^{Shininess} $$</p><p>The $k_s$ is a constant describing the material’s specular property. The $Shininess$, also called $Glossiness$, indicates how shiny the object is or how smooth the object is.</p><p>Finally, the phong lighting model is like:</p><p>$$ Ambient + Diffuse + Specular $$</p><blockquote><p>Inplementing the phong lighting model in a vertex shader is called gourand shading.</p></blockquote><p>&nbsp;</p><h3 id="Blinn-Phong-Lighting-Model"><a href="#Blinn-Phong-Lighting-Model" class="headerlink" title="Blinn-Phong Lighting Model"></a>Blinn-Phong Lighting Model</h3><p>Blinn proposed an alternative for specular to avoid calculating reflected vector, which is more efficient. He introduced a new vector called <strong>halfway vector</strong>:</p><p>$$ \vec h = \frac{\vec V_{view} + \vec V_{light}}{|\vec V_{view} + \vec V_{light}|} $$</p><p>$$ Specular = k_s \times LightColor \times max(0,\ (\vec h \cdot \vec N))^{Shininess} $$</p><p>Now we’ve finished the standard lighting model!</p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We went through some concepts and basic lighting models. They are not complicated, but really good for us to learn about how we simulate a light phenomenon in a rendering system. Next time we will be talking about PBR, physically-based rendering, which is also called PBS, physically-base shading. It is very sophisticated so we have to extract it out. See you!</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://learnopengl.com" target="_blank" rel="noopener">LearnOpenGL</a></p><p>[2] <a href="https://opentextbc.ca/physicstestbook2/chapter/youngs-double-slit-experiment" target="_blank" rel="noopener">Young’s Double-Slit Interference</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Surface Shader#2 - Create First Shader</title>
      <link href="/UnityShaderDev2.html"/>
      <url>/UnityShaderDev2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Last time, we’ve talked about what a surface shader is, and what ingredients assemble a surface shader. And this time, we are going to put it into use to learn about making some simple effects. Before this, let’s go through some fundamental concepts of basic lighting.</p><p>&nbsp;</p><h3 id="Ambient-Lighting"><a href="#Ambient-Lighting" class="headerlink" title="Ambient Lighting"></a>Ambient Lighting</h3><p>In the real world, even when you’re in a dark environment with no lights on, the objects around you may not look completely dark. This is because there are always some lights from far away in the real world, like moon or some distant lights. To simulate this, we have to give an object an <strong>constant</strong> ambient color. However, this is just a simple simulation which doesn’t take into account the bounce of lights. Actually, when a light beam hits an object, it breaks into three parts:</p><ul><li>One is directly reflected by the object. </li><li>Another penetrates into the object and bounces between the molecules inside, and finally finds another way out.</li><li>The last penetrates into the object and its energy is exhausted while bouncing, and is ultimately absorbed.</li></ul><p><img src="https://ww1.yunjiexi.club/2019/08/19/7de14d1ec0db67fda1a9f760bae9000f.png" alt></p><p>I defintely dont’t want to  get deep into physics, so I only offer these simplified statements based on my understanding. The lighting model includes these is what we call <code>Global Illumination</code>, which is way beyond our range.</p><p>&nbsp;</p><h3 id="Diffuse-Lighting"><a href="#Diffuse-Lighting" class="headerlink" title="Diffuse Lighting"></a>Diffuse Lighting</h3><p>Simply saying, the diffuse lighting gives an object a color that is mixed by the object basic color and light color. In the picture above, it is the second type of subdivisions. The intensity of diffuse lighting, seemingly the brightness of the color, is affected by the angle between the fragment’s normal vector and the light ray vector.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/9521185f58016300a424271b086accf5.png" alt title="From LearnOpenGL.com"></p><p>The commonsense is that the smaller the angle is, the brighter the color is. How should we do to measure the angle? Here we apply the dot product of the normalized versions of these two vectors. The lighting equation will look like this:</p><p>$$ Diffuse = BasicColor \times (\vec N \cdot \vec V_{light}) \times LightColor  $$</p><p>&nbsp;</p><h3 id="Specular-Lighting"><a href="#Specular-Lighting" class="headerlink" title="Specular Lighting"></a>Specular Lighting</h3><!--Think about this: it's a sunny day, you stand by the side of a lake. What does the lake surface look like with intensive sunlight casted on it? It depends on what angle you look at it from. If you look down to the water right by your side, it must be very clear; if you look at the water far away from you, it looks reflective and shiny. This is called `Fresnel Reflection`.--><!--![](https://ww1.yunjiexi.club/2019/08/19/f5a0961121b9ac7b32258821541a9ab7.jpg)--><p>Specular lighting generates a highlight at where the light ray is reflected. Like diffuse lighting, it also depends on fragment normal and the light ray vector, more directly the reflected light vector. Additionally, it involves a viewing vector.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/f9526b2dd82e4777f9af3e99af423fc7.png" alt title="From LearnOpenGL.com"></p><p>The specular light equation will look like this:</p><p>$$ Specular = K_s \times LightColor \times (\vec V_{view} \cdot \vec V_{reflected})^{shininess} $$</p><blockquote><p>This is used in a lighting model called <code>Phong</code>. There is another optimized version called <code>Blinn-Phong</code> which differs a little. We will be talking about them in another article concerning variable lightings.</p></blockquote><hr><p>&nbsp;</p><h2 id="Our-First-Shader"><a href="#Our-First-Shader" class="headerlink" title="Our First Shader"></a>Our First Shader</h2><p>Now let’s get our hands moving!</p><ul><li>Create a standard surface shader.</li><li>Define some properties we need.</li></ul><pre class=" language-cpp"><code class="language-cpp">Properties <span class="token punctuation">{</span>    <span class="token function">_Color</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">_AmbientColor</span><span class="token punctuation">(</span><span class="token string">"Ambient Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">_Smoothness</span><span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">}</span>Subshader <span class="token punctuation">{</span>    CGPROGRAM    float4 _Color<span class="token punctuation">;</span>    float4 _AmbientColor<span class="token punctuation">;</span>    half _Smoothness<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This is the way Unity calls the "shininess"</span>    ENDCG<span class="token punctuation">}</span></code></pre><ul><li>Modify the surface funtion.</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span><span class="token punctuation">{</span>    fixed4 c <span class="token operator">=</span> _Color <span class="token operator">+</span> _AmbientColor<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Smoothness<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Now we can see some cool staff! The shiny spot is the reflection of the light source, a sun simulation.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/80ce4036f6b8eb951ff4be6602ddc3ba.png" alt></p><p>And if we decrease the <strong>Smoothness</strong>, we can see the shiny spot expanding and blurring. Also, the overall reflection diminishes, you can barely see the sky box reflection.</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/16500d39fde6d66eb3736c9761c68a46.png" alt></p><p>&nbsp;</p><h3 id="Custom-Lighting"><a href="#Custom-Lighting" class="headerlink" title="Custom Lighting"></a>Custom Lighting</h3><p>Now you may have a question: where are the lighting equations we’ve talked about?</p><p>We don’t need any of them here because we are using Unity build-in lighting model for the surface shader. We just provide data, and Unity will do the math. However, we can still attest these equations by ourselves, because Unity allows us to define our own custom lighting model in the surface shader.</p><ul><li>Your custom lighting function name should start with <strong>Lighting</strong>. And the usage is just like the build-in lighting model.</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> surface surf Custom</span>float4 <span class="token function">LightingCustom</span> <span class="token punctuation">(</span>SurfaceOutput s<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>Custom lighting function use <code>SurfaceOutput</code> struct.</li></ul><p>First of all, define properties we need.</p><pre class=" language-cpp"><code class="language-cpp">Properties <span class="token punctuation">{</span>    <span class="token function">_Color</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">_AmbientColor</span><span class="token punctuation">(</span><span class="token string">"Ambient Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">_Smoothness</span><span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">}</span>Subshader <span class="token punctuation">{</span>    CGPROGRAM    float4 _Color<span class="token punctuation">;</span>    float4 _AmbientColor<span class="token punctuation">;</span>    half _Smoothness<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// This is the way Unity calls the "shininess"</span>    ENDCG<span class="token punctuation">}</span></code></pre><p>Since ambient color is constant and doesn’t interact with lights, we can simply assign it. Bind the <code>Smoothness</code> with our <code>_Smoothness</code>, and preset the <code>Specular</code>.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutput o<span class="token punctuation">)</span><span class="token punctuation">{</span>    fixed4 c <span class="token operator">=</span> _Color <span class="token operator">+</span> _AmbientColor<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Smoothness<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Specular <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Now use the lighting equations we learned to finish our custom lighting function.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// The lightDir and viewDir have defined by Unity, you can directly grab them and use</span>float4 <span class="token function">LightingCustom</span><span class="token punctuation">(</span>SurfaceOutput s<span class="token punctuation">,</span> float3 lightDir<span class="token punctuation">,</span> float3 viewDir<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Diffuse</span>    <span class="token comment" spellcheck="true">// Use "max" to prevent the dot product from being negative</span>    <span class="token comment" spellcheck="true">// The "_LightColor0" is defined by Unity</span>    float3 diff <span class="token operator">=</span> s<span class="token punctuation">.</span>Albedo <span class="token operator">*</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">dot</span><span class="token punctuation">(</span>lightDir<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> _LightColor0<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Specular</span>    <span class="token comment" spellcheck="true">// The reflected light vector is -L - 2 * (-L · N) * N, and do not forget to normalize it</span>    float3 reflected <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token operator">-</span>lightDir <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">dot</span><span class="token punctuation">(</span><span class="token operator">-</span>lightDir<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">;</span>    float3 spec <span class="token operator">=</span> _LightColor0<span class="token punctuation">.</span>rgb <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">dot</span><span class="token punctuation">(</span>viewDir<span class="token punctuation">,</span> reflected<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>Specular <span class="token operator">*</span> <span class="token number">128.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>Gloss<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Final result</span>    float4 c<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>rgb <span class="token operator">=</span> diff <span class="token operator">+</span> spec<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>a <span class="token operator">=</span> s<span class="token punctuation">.</span>Alpha<span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Apply it and have a look!</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/518d4528368171ebffb36d0aac1d269f.png" alt></p><p>Change the smoothness!</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/220b446a3b601efc50b94d63a36cbedf.png" alt></p><hr><p>&nbsp;</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>We’ve done a great job, but it still looks not right. Our sphere is not reflecting the surrounding environment. We only make it reflect the light to form specular effect.</p><p>The most realistic way to simulate reflection is to apply global illumination, taking indirect lights into account. But this is very costly, sometimes it may cost you hours to render which is definitely not we want. Fortunately, there are indeed some ways to supplant GI. One of them is cube map: bake the environment onto a cube map, and then use object’s reflected vectors to sample the cube map.</p><p>&nbsp;</p><h3 id="Cubemap"><a href="#Cubemap" class="headerlink" title="Cubemap"></a>Cubemap</h3><p>Using cube map to simulate reflection just need a few changes.</p><p>First, we add a cube property.</p><pre class=" language-cpp"><code class="language-cpp">Properties<span class="token punctuation">{</span>    <span class="token function">_Cube</span><span class="token punctuation">(</span><span class="token string">"Cube Map"</span><span class="token punctuation">,</span> Cube<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>Subshader<span class="token punctuation">{</span>    CGPROGRAM    samplerCUBE _Cube<span class="token punctuation">;</span>    ENDCG<span class="token punctuation">}</span></code></pre><p>Then we figure out the reflected vector. The environment reflected on the sphere changes as we change our viewpoints, so this time, different from above, we calculate reflected vector based on viewing vector and normals.</p><pre class=" language-cpp"><code class="language-cpp">float4 <span class="token function">LightingCustom</span><span class="token punctuation">(</span>SurfaceOutput s<span class="token punctuation">,</span> float3 lightDir<span class="token punctuation">,</span> float3 viewDir<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Reflect</span>    float3 refl <span class="token operator">=</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token operator">-</span>viewDir<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Sample the cube map and synthesize the color.</p><pre class=" language-cpp"><code class="language-cpp">float4 <span class="token function">LightingCustom</span><span class="token punctuation">(</span>SurfaceOutput s<span class="token punctuation">,</span> float3 lightDir<span class="token punctuation">,</span> float3 viewDir<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Reflect</span>    float3 refl <span class="token operator">=</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token operator">-</span>viewDir<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">;</span>    float3 ref <span class="token operator">=</span> <span class="token function">texCUBE</span><span class="token punctuation">(</span>_Cube<span class="token punctuation">,</span> refl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Final result</span>    float4 c<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>rgb <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>diff <span class="token operator">+</span> spec<span class="token punctuation">,</span> ref <span class="token operator">+</span> spec<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Gloss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Let’s apply a cube map and have a look!</p><p><img src="https://ww1.yunjiexi.club/2019/08/19/d993db578b3dd78e530c02e0a4ddd614.png" alt></p><p><img src="https://ww1.yunjiexi.club/2019/08/19/5830da6fadfdc90fb9cc390e89b48e9e.png" alt></p><blockquote><p>This cube map lacks a bottom face.</p></blockquote><p>&nbsp;</p><h3 id="Reflection-Probe"><a href="#Reflection-Probe" class="headerlink" title="Reflection Probe"></a>Reflection Probe</h3><p>Reflection probe is much easier than simple cube map. We don’t have to assign a cube map to every material any more.</p><pre class=" language-cpp"><code class="language-cpp">float4 <span class="token function">LightingCustom</span><span class="token punctuation">(</span>SurfaceOutput s<span class="token punctuation">,</span> float3 lightDir<span class="token punctuation">,</span> float3 viewDir<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Reflect</span>    float3 refl <span class="token operator">=</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token operator">-</span>viewDir<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Normal<span class="token punctuation">)</span><span class="token punctuation">;</span>    float3 ref <span class="token operator">=</span> <span class="token function">texCUBE</span><span class="token punctuation">(</span>_Cube<span class="token punctuation">,</span> refl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Reflection probe</span>    half4 cube <span class="token operator">=</span> <span class="token function">UNITY_SAMPLE_TEXCUBE</span><span class="token punctuation">(</span>unity_SpecCube0<span class="token punctuation">,</span> refle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Final result</span>    float4 c<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>rgb <span class="token operator">=</span> <span class="token function">lerp</span><span class="token punctuation">(</span>diff <span class="token operator">+</span> spec<span class="token punctuation">,</span> cube <span class="token operator">+</span> spec<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Gloss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/19/6d1101bd8e2395aa95c54984f558279a.png" alt></p><p>It’s still not that good, but we are much closer!</p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Surface shader is amazing, isn’t it? You can easily achieve some photorealistic effects with it. And if you want some special effects, you are free to define your own lighting model. It’s really gorgeous and appealing! We talked about a basic lighting model called <strong>Phong</strong> and learn several related lighting equations. In the future, we will meet some other lighting models as well, they are all attractive! Additionally, two simple reflection simulations were proposed, we will go through more about reflection in the future. See you!</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Unity 2018 Shaders and Effects Cookbook 3rd Edition - John P. Doran and Alan Zucconi</p><p>[2] <a href="https://docs.unity3d.com/Manual/SL-SurfaceShaders.html" target="_blank" rel="noopener">Unity Documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Surface Shader#1 - First Meet</title>
      <link href="/UnityShaderDev1.html"/>
      <url>/UnityShaderDev1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>In Unity, a single empty <code>GameObject</code> is meaningless. It needs some extra modules to be attached to it to make itself functional. We call these modules <code>components</code>. Now you’ve been using Unity, you must have known some of them, like a <code>Transform</code> component which is required for every game object. If you want to see a solid object, a <code>MeshFilter</code> component and a <code>MeshRenderer</code> component are required. A mesh filter is used to manage the mesh or, we can say, the model of the game object, and it can be more than 1. A mesh renderer is used to manage the materials for each mesh in the mesh filter. Every material has its own shader, and this is what we are going to talk about.</p><blockquote><p>Notice:<br>The number of materials in a mesh renderer can be more than that of meshes in a mesh filter, but make sure you never do this. It is conpletely unnecessary, and won’t enhance the expression and cost more in performance.</p></blockquote><hr><p>&nbsp;</p><h2 id="Make-Acquaintance"><a href="#Make-Acquaintance" class="headerlink" title="Make Acquaintance"></a>Make Acquaintance</h2><p>Let’s finish some preparatory works first.</p><ul><li>Right click and select <strong>Create | Folder</strong> and rename it <strong>Shaders</strong>.</li><li>Likewise, create another two folders and rename them <strong>Materials</strong> and <strong>Textures</strong> respectively.</li><li>In the <strong>Shaders</strong>, right click and select <strong>Create | Shader | Standard Surface Shader</strong> and rename it whatever you want.</li><li>Open the shader file.</li></ul><p>And you can see something like below:</p><pre class=" language-cpp"><code class="language-cpp">Shader <span class="token string">"Custom/FirstShader"</span><span class="token punctuation">{</span>    Properties    <span class="token punctuation">{</span>        <span class="token function">_Color</span> <span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> Color<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">_MainTex</span> <span class="token punctuation">(</span><span class="token string">"Albedo (RGB)"</span><span class="token punctuation">,</span> 2D<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"white"</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token function">_Glossiness</span> <span class="token punctuation">(</span><span class="token string">"Smoothness"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span>        <span class="token function">_Metallic</span> <span class="token punctuation">(</span><span class="token string">"Metallic"</span><span class="token punctuation">,</span> <span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token punctuation">}</span>    SubShader    <span class="token punctuation">{</span>        Tags <span class="token punctuation">{</span> <span class="token string">"RenderType"</span><span class="token operator">=</span><span class="token string">"Opaque"</span> <span class="token punctuation">}</span>        LOD <span class="token number">200</span>        CGPROGRAM        <span class="token comment" spellcheck="true">// Physically based Standard lighting model, and enable shadows on all light types</span>        <span class="token macro property">#<span class="token directive keyword">pragma</span> surface surf Standard fullforwardshadows</span>        <span class="token comment" spellcheck="true">// Use shader model 3.0 target, to get nicer looking lighting</span>        <span class="token macro property">#<span class="token directive keyword">pragma</span> target 3.0</span>        sampler2D _MainTex<span class="token punctuation">;</span>        <span class="token keyword">struct</span> Input        <span class="token punctuation">{</span>            float2 uv_MainTex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        half _Glossiness<span class="token punctuation">;</span>        half _Metallic<span class="token punctuation">;</span>        fixed4 _Color<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.</span>        <span class="token comment" spellcheck="true">// See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.</span>        <span class="token comment" spellcheck="true">// #pragma instancing_options assumeuniformscaling</span>        <span class="token function">UNITY_INSTANCING_BUFFER_START</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// put more per-instance properties here</span>        <span class="token function">UNITY_INSTANCING_BUFFER_END</span><span class="token punctuation">(</span>Props<span class="token punctuation">)</span>        <span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Albedo comes from a texture tinted by color</span>            fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Metallic and smoothness come from slider variables</span>            o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ENDCG    <span class="token punctuation">}</span>    FallBack <span class="token string">"Diffuse"</span><span class="token punctuation">}</span></code></pre><ul><li><p>The 1st line indicates the path of shader in the drop-down list of a material component.<br><img src="https://ww1.yunjiexi.club/2019/08/18/18b17012b1941a4de2adb0f4dbffc37e.png" alt><br><img src="https://ww1.yunjiexi.club/2019/08/18/07ee241f3981c7958dd9d60d754b24ef.png" alt></p></li><li><p>The last line tells Unity that if this shade is not supported by the graphics card, use the <code>Diffuse</code> shader.</p></li><li><p><code>Properties</code> contains all the properties of the shader, and they are exposed on the material panel, making it really easy for you to adjust the properties to achieve what you want. Notice that no <code>;</code> at the end of a property item. To learn more about the property, you can check <a href="https://docs.unity3d.com/Manual/SL-Properties.html" target="_blank" rel="noopener">here</a>.</p></li></ul><ul><li><code>Subshader</code> is the functional part of a shader. You can set up the <code>Tags</code> and <code>LOD</code>, and you can define some <a href="https://docs.unity3d.com/Manual/SL-Pass.html" target="_blank" rel="noopener">Pass</a>. Those in the <code>CGPROGRAM-ENDCG</code> block are the real CG code which we mainly focus on, responsible for calculations. A shader can have more than one subshaders, and it will always pick the first one to perform the task. If the first one is not supported, then the second one, the third one, and finally the fallback.</li></ul><p>This is pretty much the general structure of a surface shader. Now, we shift our attention onto the code in the <code>CGPROGRAM-ENDCG</code> block.</p><hr><p>&nbsp;</p><h2 id="CG-Program"><a href="#CG-Program" class="headerlink" title="CG Program"></a>CG Program</h2><p>If you learned about OpenGL or rendering pipline, you could have known that we spend most of our time with the <code>vertex shader</code> and <code>fragment shader</code> when we do rendering. You can also use them to perform rendering tasks instead of using surface shader. We’ve talked about <code>Pass</code> just now. In Unity shader, if you deal with vertex shader and fragment shader, you should put them in a pass. For each pass, rendering is performed once, using the vertex and fragment shaders inside.</p><pre class=" language-cpp"><code class="language-cpp">SubShader<span class="token punctuation">{</span>    Pass    <span class="token punctuation">{</span>        CGPROGRAM        <span class="token macro property">#<span class="token directive keyword">pragma</span> vertex vert</span>        <span class="token macro property">#<span class="token directive keyword">pragma</span> fragment frag</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        ENDCG    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>What about surface shader? Actually, surface shader is a kind of capsulation of vertex and fragment shaders. In a vertex shader, you have to tranform the vertices from local space into the clip space manually. In a fragment shader, you have to define a light model, which involves a lot of mathematic and physics staff. It’s no doubt a complicated job to do. However, with surface shader, you just tell Unity what color it is, which texture to use, which light model to apply, etc. And Unity does all the rest for you!</p><p>&nbsp;</p><h3 id="Surface-Function"><a href="#Surface-Function" class="headerlink" title="Surface Function"></a>Surface Function</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> surface surf Standard fullforwardshadows </span><span class="token keyword">struct</span> Input<span class="token punctuation">{</span>    float2 uv_MainTex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">surf</span> <span class="token punctuation">(</span>Input IN<span class="token punctuation">,</span> inout SurfaceOutputStandard o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Albedo comes from a texture tinted by color</span>    fixed4 c <span class="token operator">=</span> <span class="token function">tex2D</span> <span class="token punctuation">(</span>_MainTex<span class="token punctuation">,</span> IN<span class="token punctuation">.</span>uv_MainTex<span class="token punctuation">)</span> <span class="token operator">*</span> _Color<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Albedo <span class="token operator">=</span> c<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Metallic and smoothness come from slider variables</span>    o<span class="token punctuation">.</span>Metallic <span class="token operator">=</span> _Metallic<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Smoothness <span class="token operator">=</span> _Glossiness<span class="token punctuation">;</span>    o<span class="token punctuation">.</span>Alpha <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>The first line is a declaration of a surface function. The <code>surface</code> indicates that it is a surface shader function. The <code>surf</code> is the function name which you can rename. The <code>Standard</code> is a build-in light model being used. The <code>fullforwardShadows</code> is a optional setup.</p><p>&nbsp;</p><h3 id="Source-of-Data"><a href="#Source-of-Data" class="headerlink" title="Source of Data"></a>Source of Data</h3><p>The <code>Input</code> struct is the source of the data. In the code above, The Input provides the uv coordinates of a mesh. Additionally, it also contains many other data:</p><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td>float3 viewDir</td><td>The view direction</td></tr><tr><td>float4 screenPos</td><td>The screen space position</td></tr><tr><td>float3 worldPos</td><td>The world space position</td></tr><tr><td>float3 worldRefl</td><td>The reflecting direction in world space</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>&nbsp;</p><h3 id="Surface-Properties"><a href="#Surface-Properties" class="headerlink" title="Surface Properties"></a>Surface Properties</h3><p>With the data <code>Input</code> struct provides, Unity can carry on calculations based on that. So, we need another struct to store the results. Unity provides 3 different structs for different light models: <code>SurfaceOutput</code>, <code>SurfaceOutputStandard</code>, and <code>SurfaceOutputStandardSpecular</code>. The first one is for some simple nonphysical light model, like <strong>Lambert</strong> and <strong>Blinnphong</strong>. Another two are for the PBR light model.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> SurfaceOutput <span class="token punctuation">{</span>    fixed3 Albedo<span class="token punctuation">;</span>    fixed3 Normal<span class="token punctuation">;</span>    fixed3 Emission<span class="token punctuation">;</span>    half Specular<span class="token punctuation">;</span>    fixed Gloss<span class="token punctuation">;</span>    fixed Alpha<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> SurfaceOutputStandard <span class="token punctuation">{</span>    fixed3 Albedo<span class="token punctuation">;</span>    fixed3 Normal<span class="token punctuation">;</span>    half3 Emission<span class="token punctuation">;</span>    half Metallic<span class="token punctuation">;</span>    half Smoothness<span class="token punctuation">;</span>    half Occlusion<span class="token punctuation">;</span>    fixed Alpha<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> SurfaceOutputStandardSpecular <span class="token punctuation">{</span>    fixed3 Albedo<span class="token punctuation">;</span>    fixed3 Normal<span class="token punctuation">;</span>    half3 Emission<span class="token punctuation">;</span>    half Specular<span class="token punctuation">;</span>    half Smoothness<span class="token punctuation">;</span>    half Occlusion<span class="token punctuation">;</span>    fixed Alpha<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We went through the general structure of a standard surface shader, and talked about every ingredients of it. And next time, we are going to set about writing some code and formally start our surface shader journey!</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Unity 2018 Shaders and Effects Cookbook 3rd Edition - John P. Doran and Alan Zucconi<br>[2] <a href="https://docs.unity3d.com/Manual/SL-SurfaceShaders.html" target="_blank" rel="noopener">Unity Documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Shader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#4 - Binary Tree 2 of 4</title>
      <link href="/DataStructureJourney4.html"/>
      <url>/DataStructureJourney4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>You may have heard of <code>binary search</code>. If you are searching for an item among an sorted array using binary search, it starts with checking the equality of the search value $K$ and the middle value of the array $K_m$. If they equal, the processing immediately stops. If the $K &gt; K_m$, then it goes to check the equality of the $K$ and the middle value among the subarray consisting of all the item on the right of the $K_m$, or on the left for the case $K &lt; K_m$. And keep doing this until the match is found.</p><blockquote><p>Notice:<br>A significant thing here is that the array on which the binary search is performed must be sorted, whatever ascendingly or descendingly.</p></blockquote><p>Let’s get back and focus on binary tree. You’ve known that it consists of a root node, a left child node, and a right childe node. If the contents in these nodes have a specific relationship in magnitude, for example, $K_l &lt; K_r \leq K_r$, it is just like a sorted array in a binary tree form. By a relationship like this, we come up with a binary tree on which a binary search can be performed, and it is called <code>binary search tree</code>.</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/189619d051e0e73cb50fd29de2026d59.png" alt title="Binary Search Tree"></p><hr><p>&nbsp;</p><h2 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h2><p>We defined a tree node structure last time, and we are going to use it to finish the binary search tree class. In the definition of the node class, we applied <code>template</code>. And in that template are two types of parameter: one for search key, the other for the contents of data. Applying a search key is important, because in some cases, the data structure we aim to process can be complicated, like a staff including an ID, a name, an age, a phone number, a vocation, an address, etc. In most cases, we don’t know all of them precisely, if we do, we don’t have to search for it. So we can make the ID a search key, and find the match to get all the rest. Since the binary tree is organized by magnitude, the search keys have to be comparable.</p><p>Say that we are making a game, and there are bunch of weapons in the game. Each weapon has its own ID, name, and damage. Here we take the ID as a search key.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Weapon<span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> damage<span class="token punctuation">;</span>    <span class="token function">Weapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Weapon</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> string nam<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dam<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        index <span class="token operator">=</span> idx<span class="token punctuation">;</span>        name <span class="token operator">=</span> nam<span class="token punctuation">;</span>        damage <span class="token operator">=</span> dam<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><p>We use a method called recursion to process insertion.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Insert a node to a specific position by its index</span>    Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> node<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> root<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span><span class="token function">Insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetRight</span><span class="token punctuation">(</span><span class="token function">Insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">InsertNode</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> node<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p>Recursion is also applied in searching.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Find a node matching the index, return the first node if multiple matches are found</span>    Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> idx<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> idx<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Find</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">Find</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><p>Deletion of a node is much more complicated. If a node only has a left child or a right child, we can replace it with the left child or the right child when it is removed. However, the situation will be more sophisticated when a node to be deleted has two children and even the children have their own children. In this case, we cannot simply replace it, we also have to reconstruct the subtree to make them put on correct positions to meet the binary tree requirement.</p><p>Let’s take a look at this case:</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/2c77382ecac4f11bdd641744b33f6f89.png" alt></p><p>We are going to delete the node containing $67$. How can we reconstruct the subtree whose root node is $67$, a node waiting to be removed? Let’s first make this clear: a subtree formed by certain nodes can be very different. So here are two solutions:</p><ol><li>Replace the node with the most left node in its right subtree.</li><li>Replace the node with the most right node in its left subtree.</li></ol><p>Here, we use the first solution, and process and result are presented in the picture above. If you choose the second one, you should replace the $67$ with the $59$, and set its right child to $79$. Now let’s take a further look, what if the most left node has a right child?</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/7828d7ef5f6238f71e8c1c3b45532117.png" alt></p><p>As a matter of fact, it won’t make much difference. In the case above, we assign the deleted node’s parent, left child, and right child to the replacing node. And in this case, for the deleted node’s right child we perform a insertion: insert it into the subtree taking the replacing node as its root. The insertion will automatically put the right child to the correct position. Like what’s presented in the picture above, the $79$ is automatically set as $77$ right child. Should we perform a insertion on the left child of the deleted node? The answer is absolutely no, we don’t have to do that. Because we choose the most left childe node of the deleted node’s right subtree as the replacing node, a most left node has no left child, so we can simply assign.</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">// Delete a node by its index</span>    Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Find the node to be deleted</span>        Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> target <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Make sure that the node you want to remove is present</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Find the replacing node</span>            Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">FindLeft</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Reconstruct the subtree</span>            temp<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> <span class="token function">Insert</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetParent</span><span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    target<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetRight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                root <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Disconnect the node we want to delete</span>            target<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetParent</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetLeft</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            target<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetRight</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> target<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p>&nbsp;</p><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p>I’ve constructed a binary search tree like this:</p><p><img src="https://ww1.yunjiexi.club/2019/08/11/f4bdb350b2b5b4809ac3e9206d2c276b.png" alt></p><p>Now we delete the root node holding $100$. According to the deletion and reconstruction scheme we talked about, the $110$ will take place of it. And the $120$ will be set as the right child of the $115$. So if we try to get access to the right child of $115$, it should print out the information of $120$.</p><pre class=" language-cpp"><code class="language-cpp">BSTree tree<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create and insert nodes</span><span class="token comment" spellcheck="true">// .....</span>tree<span class="token punctuation">.</span><span class="token function">DeleteNode</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> Weapon<span class="token operator">></span><span class="token operator">*</span> result <span class="token operator">=</span> tree<span class="token punctuation">.</span><span class="token function">FindNode</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print</span><span class="token punctuation">(</span>result<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/11/18f81b1c9c7a006fa67eaff7e6afe42e.png" alt></p><p><img src="https://ww1.yunjiexi.club/2019/08/11/f32068702133c12769b5af0fc75df982.png" alt></p><p>We succeed! You can check the complete source code <a href="https://github.com/PokhoOfSCUT/DataStructureReview/tree/master/BinarySearchTree/BinarySearchTree" target="_blank" rel="noopener">here</a>.</p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Binary search tree is a very important application of binary tree. It is very efficient for a structure on which frequent search operations are performed. For your own damands, you can add a modification function to change the contents or other functions like deletion of the minimum node or the maximum node. And the deletion and reconstruction scheme I offered is just one of the feasible solutions, since the result subtree forms vary, you can figure out you own solution. Next time we will talk about another application of binary tree. See you!</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#3 - Binary Tree 1 of 4</title>
      <link href="/DataStructureJourney3.html"/>
      <url>/DataStructureJourney3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>A <code>binary tree</code> is made up of a finite set of elements called <code>nodes</code>. This set either is empty or consists of a node called the <code>root</code> together with two binary trees, called the left and right <code>subtrees</code>. The roots of these subtrees are childeren of the root.</p><p><img src="https://ww1.yunjiexi.club/2019/08/08/6b583c11b31171fec41032cf5bdde131.png" alt></p><p>Binary tree is widely used, and it permits both efficient access and update to large collections of data. Apart from organizing and searching, it is also applied for many things, like prioritizing jobs, describing mathematical expressions and the syntactic elements of computer programs, etc.</p><hr><p>&nbsp;</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p><img src="https://ww1.yunjiexi.club/2019/08/08/7722f93a9165c20a1d383b66ff886b6b.png" alt></p><p>This is a graph presenting a simple binary tree. The lines between nodes are called <code>edges</code>. Say $N_1$, $N_2$, and $N_5$ is a sequence of nodes, and they are in an order from ancestor to descendant, then this sequence is called a <code>path</code> from $N_1$ to $N_5$. And the length of the path is the number of the edges in the path, which is, in this case, 2. The <code>depth</code> of a node in the tree is the length of the path from the root of the tree to the node itself. For instance, the node $N_4$ holds a depth of 2, while the $N_1$, the root of the tree, holds a depth of 0. The <code>height</code> of a node is 1 more than its depth.</p><p>The node without any child node which, in another word, has two empty children is called a <code>leaf</code> node. A node that has at least one non-empty child is called <code>internal</code> node.</p><p>&nbsp;</p><h3 id="Full-amp-Complete-Binary-Tree"><a href="#Full-amp-Complete-Binary-Tree" class="headerlink" title="Full &amp; Complete Binary Tree"></a>Full &amp; Complete Binary Tree</h3><p>A <code>full binary tree</code> is a tree in which each node is a internal node with two children or a leaf. A <code>complete binary tree</code> is a tree that each level of it is filled from left to right.</p><p><img src="https://ww1.yunjiexi.club/2019/08/09/d624bcafe56836d926b253b253a656a7.png" alt></p><blockquote><p>Theorem:</p><ol><li>The number of empty subtrees in a non-empty binary tree is one more than the number of nodes in the tree.</li><li>The number of leaves in a non-empty full binary tree is one more than the number of internal nodes.</li></ol></blockquote><hr><p>&nbsp;</p><h2 id="Binary-Tree-Traversals"><a href="#Binary-Tree-Traversals" class="headerlink" title="Binary Tree Traversals"></a>Binary Tree Traversals</h2><p>We will never use a data structure just for storing something, instead we definitely want to retrieve some of them later. For a binary tree, we sometimes just want to get access to a specific node. But in some cases, we may want to visit all nodes in order. There are 3 types traversals for a binary tree: <code>preorder</code>, <code>inorder</code>, and <code>postorder</code>. Literally, we can tell that the difference between them is the time when the root node of a tree or a subtree is visited.</p><p>&nbsp;</p><h3 id="Preorder-Traversal"><a href="#Preorder-Traversal" class="headerlink" title="Preorder Traversal"></a>Preorder Traversal</h3><p>In preorder traversal, the root node of a tree or a subtree is the first node to be visited, prior to its left and right children. And then the left child node is visited, the right child node is the last one. When a preorder traversal is carried on, we first visit the root node of the tree, and if it has a non-empty left child, visit it. And next, we do the same thing to the subtree whose root node is this left child. Not until all the left nodes are visited, we start with the right ones.</p><p><img src="https://ww1.yunjiexi.club/2019/08/09/d16034a8470ca5010987ddffc94af60b.png" alt></p><p>So, the result of the preorder traversal on the above tree will be:</p><p>$$ ABDHIEJCFG $$</p><p>&nbsp;</p><h3 id="Inorder-Traversal"><a href="#Inorder-Traversal" class="headerlink" title="Inorder Traversal"></a>Inorder Traversal</h3><p>In inorder traversal, the root of a tree or a subtree is the second node to be visited, right behind the left the child. When we carry on an inorder traversal, we first check if the root has a non-empty left child. If did, we don’t visit its left child but check it until we reach the most left child and visit this child. And then visit its parent, and check the left child of the parent’s right child and repeat. This may be a little bit confusing. If you don’t catch on, just read few more times along with the result:</p><p>$$  HDIBJEAFCG $$</p><p>&nbsp;</p><h3 id="Postorder-Traversal"><a href="#Postorder-Traversal" class="headerlink" title="Postorder Traversal"></a>Postorder Traversal</h3><p>For now, the definition of postorder travsersal should be clear to you after going through the previous two traversals: visit a root after you complete visiting its left child and right child. If a root has a non-empty left child, we keep checking until we reach the most left child and visit it. Then do the same thing to the right child of the same level, and finally visited the parent. The corresponding result will be like:</p><p>$$ HIDJEBFGCA $$</p><hr><p>&nbsp;</p><h2 id="Binary-Tree-Node"><a href="#Binary-Tree-Node" class="headerlink" title="Binary Tree Node"></a>Binary Tree Node</h2><p>Finally the coding time! Let’s define a struct for the binary tree node, preparing for the upcoming practical tree structures.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> Key<span class="token punctuation">,</span> <span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Key k<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The node's key</span>    E e<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The node's value</span>    Node<span class="token operator">*</span> lc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Left child</span>    Node<span class="token operator">*</span> rc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Right child</span>    Node<span class="token operator">*</span> parent<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        lc <span class="token operator">=</span> rc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Key kVal<span class="token punctuation">,</span> E eVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        k <span class="token operator">=</span> kVal<span class="token punctuation">;</span>        e <span class="token operator">=</span> eVal<span class="token punctuation">;</span>        parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        lc <span class="token operator">=</span> rc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set and return parent node</span>    <span class="token keyword">void</span> <span class="token function">SetParent</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        parent <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token operator">*</span> <span class="token function">GetParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Return the contents of the node</span>    E<span class="token operator">&amp;</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set the value of the node</span>    <span class="token keyword">void</span> <span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> eVal<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        e <span class="token operator">=</span> eVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Get the key</span>    Key<span class="token operator">&amp;</span> <span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set the key</span>    <span class="token keyword">void</span> <span class="token function">SetKey</span><span class="token punctuation">(</span><span class="token keyword">const</span> Key<span class="token operator">&amp;</span> kVal<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> kVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set and return left child</span>    <span class="token keyword">void</span> <span class="token function">SetLeft</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> l<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        lc <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token operator">*</span> <span class="token function">GetLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> lc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Set and return right child</span>    <span class="token keyword">void</span> <span class="token function">SetRight</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rc <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token operator">*</span> <span class="token function">GetRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> rc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check if this is a leaf node</span>    <span class="token keyword">bool</span> <span class="token function">IsLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>lc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Binary tree is a really tricky one compared to what we’ve went through before and it is widely used, so it is important for you to learn about it. This time we clarified some basic properties of binary tree and had a look at 3 types of the tree traversals. And in the end, we completed the node structure for our next challenge. The most difficult part for most of you may be the traversals. However, what I’m going to tell you is that it is not that hard to understand, and it will even be easier when we code them next time.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Data Structure &amp; Algorithm Analysis in C++ - Clifford A. Shafter</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#4 - A Real Custom Editor</title>
      <link href="/UnityEditorDev4.html"/>
      <url>/UnityEditorDev4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>We’ve covered some basic concepts required in Unity editor extension, and this time, we are going make a real custom editor with some practical functionalities. If you are not familiar with the concepts yet, you are free to check them out in the previous chapters. And make sure you do some coding while reading, because this just helps you better understand.</p><hr><p>&nbsp;</p><h2 id="Get-Start"><a href="#Get-Start" class="headerlink" title="Get Start"></a>Get Start</h2><h3 id="Create-A-Editor-Window"><a href="#Create-A-Editor-Window" class="headerlink" title="Create A Editor Window"></a>Create A Editor Window</h3><p>When you create a window, do not forget:</p><ol><li>Use <code>UnityEditor</code> namespace, because the class must derive from <code>EditorWindow</code>.</li><li>Window display function has to be static.</li><li>Use <code>MenuItem</code> to make sure you can open the window in the toolbar.</li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Primitive-Spawn"><a href="#Primitive-Spawn" class="headerlink" title="Primitive Spawn"></a>Primitive Spawn</h3><p>This function allows us to create a primitive in edit mode with custom position and material color. First, we should define some variables:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">enum</span> Primitive<span class="token punctuation">{</span>    CUBE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    SPHERE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    PLANE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">bool</span> primitiveHeader <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// State of the header control</span><span class="token keyword">private</span> string primitiveString <span class="token operator">=</span> <span class="token string">"Primitive Spawn"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Header display string</span><span class="token keyword">private</span> Primitive primitive<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// EnumPopup control</span><span class="token keyword">private</span> <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// X component of the spawning position</span><span class="token keyword">private</span> <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Y component of the spawning position</span><span class="token keyword">private</span> <span class="token keyword">float</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Z component of the spawning position</span><span class="token keyword">private</span> Color primitiveColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Custom default color</span></code></pre><p>Then, we can start drawing UI items:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    primitiveHeader <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFoldoutHeaderGroup</span><span class="token punctuation">(</span>primitiveHeader<span class="token punctuation">,</span> primitiveString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>primitiveHeader<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        primitive <span class="token operator">=</span> <span class="token punctuation">(</span>Primitive<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumPopup</span><span class="token punctuation">(</span><span class="token string">"Primitive: "</span><span class="token punctuation">,</span> primitive<span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">FloatField</span><span class="token punctuation">(</span><span class="token string">"X "</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">FloatField</span><span class="token punctuation">(</span><span class="token string">"Y "</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        z <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">FloatField</span><span class="token punctuation">(</span><span class="token string">"Z "</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>        primitiveColor <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span><span class="token string">"Color "</span><span class="token punctuation">,</span> primitiveColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Create"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Vector3 spawnPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>primitive<span class="token punctuation">,</span> spawnPoint<span class="token punctuation">,</span> primitiveColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFoldoutHeaderGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Notice:<br>Since your custom editor can be very versatile and massive, it is always a good practice to keep your functionality-processing code out of the <code>OnGUI</code> to be an independent function. This will help make the <code>OnGUI</code> stay as simple as possible.</p></blockquote><p>Now, we can finish the spawning function:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>Primitive primitive<span class="token punctuation">,</span> Vector3 point<span class="token punctuation">,</span> Color color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>primitive<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> Primitive<span class="token punctuation">.</span>CUBE<span class="token operator">:</span>            GameObject cube <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Cube<span class="token punctuation">)</span><span class="token punctuation">;</span>            cube<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> point<span class="token punctuation">;</span>            cube<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sharedMaterial<span class="token punctuation">.</span>color <span class="token operator">=</span> primitiveColor<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Primitive<span class="token punctuation">.</span>SPHERE<span class="token operator">:</span>            GameObject sphere <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Sphere<span class="token punctuation">)</span><span class="token punctuation">;</span>            sphere<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> point<span class="token punctuation">;</span>            sphere<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sharedMaterial<span class="token punctuation">.</span>color <span class="token operator">=</span> primitiveColor<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Primitive<span class="token punctuation">.</span>PLANE<span class="token operator">:</span>            GameObject plane <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Plane<span class="token punctuation">)</span><span class="token punctuation">;</span>            plane<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> point<span class="token punctuation">;</span>            plane<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sharedMaterial<span class="token punctuation">.</span>color <span class="token operator">=</span> primitiveColor<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">"Unrecognized Option"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="Add-Modifier-Functionality"><a href="#Add-Modifier-Functionality" class="headerlink" title="Add Modifier Functionality"></a>Add Modifier Functionality</h3><p>By adding this kind of functionality, we can adjust our present primitives.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">bool</span> modifierHeader <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">private</span> string modifierString <span class="token operator">=</span> <span class="token string">"Primitive Modify"</span><span class="token punctuation">;</span><span class="token keyword">private</span> Color modifierColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span></code></pre><p>We also use <code>FoldoutHeader</code> to organize all our modifying options just like above:</p><pre class=" language-cpp"><code class="language-cpp">modifierHeader <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFoldoutHeaderGroup</span><span class="token punctuation">(</span>modifierHeader<span class="token punctuation">,</span> modifierString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>modifierHeader<span class="token punctuation">)</span><span class="token punctuation">{</span>    EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    modifierColor <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> modifierColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Change Color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ChangeColor</span><span class="token punctuation">(</span>modifierColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Reset"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Destroy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">DestroyPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Destroy All"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">DestroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EditorGUI<span class="token punctuation">.</span>indentLevel <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFoldoutHeaderGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Finish the unitity functions:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ChangeColor</span><span class="token punctuation">(</span>Color color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">"Select first!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span>color <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span>        Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">"Select first!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DestroyPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        GameObject<span class="token punctuation">.</span><span class="token function">DestroyImmediate</span><span class="token punctuation">(</span>Selection<span class="token punctuation">.</span>activeGameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Debug<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">"Select first!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DestroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var objects <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">FindObjectsOfTypeAll</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>GameObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Selection<span class="token punctuation">.</span>objects <span class="token operator">=</span> objects<span class="token punctuation">;</span>    var all <span class="token operator">=</span> Selection<span class="token punctuation">.</span><span class="token function">GetTransforms</span><span class="token punctuation">(</span>SelectionMode<span class="token punctuation">.</span>Editable <span class="token operator">|</span> SelectionMode<span class="token punctuation">.</span>ExcludePrefab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span><span class="token punctuation">(</span>var item in all<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>GetComponent<span class="token operator">&lt;</span>MeshRenderer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            GameObject<span class="token punctuation">.</span><span class="token function">DestroyImmediate</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p>&nbsp;</p><h2 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration"></a>Demonstration</h2><p><img src="https://ww1.yunjiexi.club/2019/08/05/66699ab9584a7ab428271062b190b96b.gif" alt></p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We’ve done an easy but great work! And what you have to know is that Unity editor extension is much more than this. When you start being involved, you may feel like lost and do not know what to do with that. It’s just fine, because you cannot create a custom editor just for a custom editor, you have to figure out what your game project needs. </p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#3 - Editor UI Groups</title>
      <link href="/UnityEditorDev3.html"/>
      <url>/UnityEditorDev3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Last time, we went through some UI controls that can be applied in our custom editor window for specialized functionalities. And this time, we will go further to put up a more advanced technique: <code>Group</code>. This is a technique which allows us to organize a whole bunch of UI elements. For example, with automatic layout, Unity makes every button occupy a single line:</p><p><img src="https://ww1.yunjiexi.club/2019/08/02/2d0bf4d9f87d71f654b9efa5d1ee263b.png" alt></p><p>By using a horizontal group, we can make these buttons evenly stand in the same line:</p><p><img src="https://ww1.yunjiexi.club/2019/08/02/5f5023713c657cc2ae545e9c303b4d0a.png" alt></p><hr><p>&nbsp;</p><h2 id="Intro-and-Usage"><a href="#Intro-and-Usage" class="headerlink" title="Intro and Usage"></a>Intro and Usage</h2><p>Typically, the <code>Group</code> function consists of a beginning part, a ending part, and all the UI controls between them. The beginning part is mostly named <code>Beginxxx</code>, while the ending part is mostly named <code>Endxxx</code>. Same with UI controls, they are also static in the <code>EditorGUILayout</code> class.</p><p>&nbsp;</p><h3 id="BeginHorizontal"><a href="#BeginHorizontal" class="headerlink" title="BeginHorizontal"></a>BeginHorizontal</h3><p><code>BeginHorizontal</code> is what used just now to make two buttons in the same line evenly. You can make anything in the same line, for instance, a button along with a text field, a text field along with a color picker, etc. You can even put 3 or more items together, but always pay attention to the window size. If you organize too many items in the same line and your window width is not enough, it will make it diffcult to identify them clearly.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Back"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Next"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&nbsp;</p><h3 id="BeginFadeGroup"><a href="#BeginFadeGroup" class="headerlink" title="BeginFadeGroup"></a>BeginFadeGroup</h3><p><code>BeginFadeGroup</code> can make the area that contains a collection of UI items partially or completely faded. It depends on the value of the parameter it takes. It takes a float within the range from $0$ to $1$, and $0$ means that nothing is faded while $1$ for everything faded.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFadeGroup</span><span class="token punctuation">(</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_Color <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span>m_Color<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_String <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span>m_String<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFadeGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/bb223a09ab4812a0f8454c5781502755.png" alt></p><p>&nbsp;</p><h3 id="BeginFoldoutHeaderGroup"><a href="#BeginFoldoutHeaderGroup" class="headerlink" title="BeginFoldoutHeaderGroup"></a>BeginFoldoutHeaderGroup</h3><p><code>BeginFoldoutHeaderGroup</code> is useful when your custom editor has a very huge section that force you scroll down a lot to skip it. With BeginFoldoutHeaderGroup, you can just fold the whole section if it it not being used. Just like the header of a component you can easily see in a inspector.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    string m_String<span class="token punctuation">;</span>    Color m_Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>white<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fold <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginFoldoutHeaderGroup</span><span class="token punctuation">(</span>fold<span class="token punctuation">,</span> <span class="token string">"Panel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fold<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            EditorGUI<span class="token punctuation">.</span>indentLevel<span class="token operator">++</span><span class="token punctuation">;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_Color <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span>m_Color<span class="token punctuation">)</span><span class="token punctuation">;</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">PrefixLabel</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_String <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">TextField</span><span class="token punctuation">(</span>m_String<span class="token punctuation">)</span><span class="token punctuation">;</span>            EditorGUI<span class="token punctuation">.</span>indentLevel<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndFoldoutHeaderGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/5caa72dd449332dddce343b5d124d1eb.png" alt></p><p>&nbsp;</p><h3 id="BeginScrollView"><a href="#BeginScrollView" class="headerlink" title="BeginScrollView"></a>BeginScrollView</h3><p>I believe that you all have used <code>ScrollView</code> control in UGUI system, <code>BeginScrollView</code> is pretty much the same, offering a display area with bar to scroll to view excess contents.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    Vector2 scrollPos<span class="token punctuation">;</span>    string t <span class="token operator">=</span> <span class="token string">"This is a string inside a Scroll view!"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scrollPos <span class="token operator">=</span>            EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginScrollView</span><span class="token punctuation">(</span>scrollPos<span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndScrollView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Add More Text"</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GUILayout<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" \nAnd this is more text!"</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Clear"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/838afeedefef690522dbd100367da90d.png" alt></p><p>&nbsp;</p><h3 id="BeginToggleGroup"><a href="#BeginToggleGroup" class="headerlink" title="BeginToggleGroup"></a>BeginToggleGroup</h3><p><code>BeginToggleGroup</code> gives a toggle control above the collection of items, and you can determine the availability of the collection with it. If you checke the toggle, the items are available. If not, they are not available.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> posGroupEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> rotGroupEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        posGroupEnabled <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginToggleGroup</span><span class="token punctuation">(</span><span class="token string">"Align position"</span><span class="token punctuation">,</span> posGroupEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndToggleGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rotGroupEnabled <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">BeginToggleGroup</span><span class="token punctuation">(</span><span class="token string">"Align rotation"</span><span class="token punctuation">,</span> rotGroupEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        rot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> rot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> rot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rot<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">Toggle</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span> rot<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">EndToggleGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/08/02/97e03b91917d05299e8aa157d95aff42.png" alt></p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Even though we only code couple of lines, but the result is pretty good, we’ve got a very good start. This is just an iceberg of Unity editor, and if you want to create much better one, you can find some open source projects to study their source codes or get on the <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">Unity.com</a> to look through the documentation.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">Unity Documents</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#2 - Editor UI Controls</title>
      <link href="/UnityEditorDev2.html"/>
      <url>/UnityEditorDev2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Last time we learned how create a custom editor window, and in this chapter we are going to add some UI controls that we can interact with to make the window more like a tool.</p><p>Before this, we have to shed light on some concepts first.</p><hr><p>&nbsp;</p><h2 id="GUI-vs-EditorGUI"><a href="#GUI-vs-EditorGUI" class="headerlink" title="GUI vs EditorGUI"></a>GUI vs EditorGUI</h2><p>These are 2 important Unity UI API classes. The difference between them is mostly the use case. Simply saying, the <code>GUI</code> is used in the game scene to display UI items, while the <code>EditorGUI</code> is used in editor extension to display UI items in the custom window. When you use them, you have to manually adjust the layout of the UI.</p><p>&nbsp;</p><h2 id="GUILayout-vs-EditorGUILayout"><a href="#GUILayout-vs-EditorGUILayout" class="headerlink" title="GUILayout vs EditorGUILayout"></a>GUILayout vs EditorGUILayout</h2><p>We can regard these two as the wrappers of GUI and EditorGUI, the UI classes with automatic layout. It means you are able to create your UI more efficiently since you don’t have to adjust the layout manually. We will use <code>GUILayout</code> and <code>EditorGUILayout</code> in this chapter.</p><hr><p>&nbsp;</p><h2 id="Intro-and-Usage"><a href="#Intro-and-Usage" class="headerlink" title="Intro and Usage"></a>Intro and Usage</h2><p>The functions to create specific UI items in GUILayout and EditorGUILayout are static, so you can apply them by doing <code>GUILayout.xxx</code> or <code>EditorGUILayout.xxx</code>. More importantly, you have to make sure that you put all these functions witin <code>OnGUI</code> function which is responsible for UI rendering.</p><p>&nbsp;</p><h3 id="CurveField"><a href="#CurveField" class="headerlink" title="CurveField"></a>CurveField</h3><p><code>CurveField</code> is what you use to make a curve field for editing an <a href="https://docs.unity3d.com/ScriptReference/AnimationCurve.html" target="_blank" rel="noopener">AnimationCurve</a>.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Define an variable of AnimationCurve type</span>    AnimationCurve curve <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AnimationCurve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Create a curve field</span>        curve <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">CurveField</span><span class="token punctuation">(</span><span class="token string">"Curve"</span><span class="token punctuation">,</span> curve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/980329aff1cbf994ade225410338f284.png" alt></p><p>&nbsp;</p><h3 id="ColorField"><a href="#ColorField" class="headerlink" title="ColorField"></a>ColorField</h3><p><code>ColorFiled</code> is what you can use to make color field with color picker.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Define an variable of Color type</span>    Color color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        color <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">ColorField</span><span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/a5b6f83c06e1653b19a163408f9b8b13.png" alt></p><p>&nbsp;</p><h3 id="DelayDoubleField"><a href="#DelayDoubleField" class="headerlink" title="DelayDoubleField"></a>DelayDoubleField</h3><p><code>DelayDoubleField</code> can make a input field for entering doubles. <code>DoubleField</code> holds the similar functionality, but the value is changed right away after the contents in the input field change. As to DelayDoubleField, the value is only changed if the enter is pressed or the focus is moved away.</p><blockquote><p>Notice:<br>Additionally, there are <code>DelayIntField</code>, <code>DelayFloatField</code>, and <code>DelayTextField</code>. They resemble the way of usage, here we only take <code>DelayDoubleField</code> as an example. Check <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">here</a> for more information.</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Define an variable of double type</span>    <span class="token keyword">double</span> speed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        speed <span class="token operator">=</span> EditorGUILayout<span class="token punctuation">.</span><span class="token function">DelayDoubleField</span><span class="token punctuation">(</span><span class="token string">"Speed"</span><span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/29ad4137186aca6a93f46e2bf7ad9003.png" alt></p><p>&nbsp;</p><h3 id="EnumFlagsField"><a href="#EnumFlagsField" class="headerlink" title="EnumFlagsField"></a>EnumFlagsField</h3><p>Displays a menu with an option for every value of the enum type when clicked. An option for the value <code>0</code> with name <code>Nothing</code> and an option for the value <code>~0</code> (that is, all bits set) with the name <code>Everything</code> are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.</p><blockquote><p>Notice:<br>This method only supports enums whose underlying types are supported by Unity’s serialization system (sbyte, short, int, byte, ushort, or uint). For enums backed by an unsigned type, the “Everything” option should have the value corresponding to all bits set (i.e. ~0 in an unchecked context or the MaxValue constant for the type).</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">enum</span> ExampleFlagsEnum    <span class="token punctuation">{</span>        None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Custom name for "Nothing" option</span>        A <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>        B <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>        AB <span class="token operator">=</span> A <span class="token operator">|</span> B<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Combination of two flags</span>        C <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>        All <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Custom name for "Everything" option</span>    <span class="token punctuation">}</span>    ExampleFlagsEnum flags<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flags <span class="token operator">=</span> <span class="token punctuation">(</span>ExampleFlagsEnum<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumFlagsField</span><span class="token punctuation">(</span><span class="token string">"Flags"</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/cb313803dc8f7f2e4d31b1e6343ba27a.png" alt></p><p>&nbsp;</p><h3 id="EnumPopup"><a href="#EnumPopup" class="headerlink" title="EnumPopup"></a>EnumPopup</h3><p><code>EnumPopup</code> also display a menu with all values with enum type, but it is not like <code>EnumFlagsField</code>. Only one value can be selected at one time, and any type of combination is prohibited.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">enum</span> Selection<span class="token punctuation">{</span>    Right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">public</span> Selection selection<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selection <span class="token operator">=</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumPopup</span><span class="token punctuation">(</span><span class="token string">"Selection"</span><span class="token punctuation">,</span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ww1.yunjiexi.club/2019/07/31/f78dcce0e057985063e0f8074be53f8c.png" alt></p><p>&nbsp;</p><h3 id="Button-amp-Label"><a href="#Button-amp-Label" class="headerlink" title="Button &amp; Label"></a>Button &amp; Label</h3><p><code>Button</code> function is not in <code>EditorGUILayou</code> class, instead of <code>GUILayout</code> class. We’ve known that these two classes are similar in a lot of ways, and they even have some functions in common. However, we usually use EditorGUILayout for the editable UI elements, while for the static ones, we choose GUILayout. But this is not a rule, you can choose not to follow.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">enum</span> Selection<span class="token punctuation">{</span>    Right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">public</span> Selection selection<span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selection <span class="token operator">=</span> <span class="token punctuation">(</span>Selection<span class="token punctuation">)</span>EditorGUILayout<span class="token punctuation">.</span><span class="token function">EnumPopup</span><span class="token punctuation">(</span><span class="token string">"Selection"</span><span class="token punctuation">,</span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span>        EditorGUILayout<span class="token punctuation">.</span><span class="token function">Space</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token string">"Switch the enum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">"Button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>selection <span class="token operator">==</span> Selection<span class="token punctuation">.</span>Left<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                selection <span class="token operator">=</span> Selection<span class="token punctuation">.</span>Right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                selection <span class="token operator">=</span> Selection<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Now, you can click the button to switch the selection value.</p><p><img src="https://ww1.yunjiexi.club/2019/07/31/58b42c4b08c706fbc7300879956c5206.png" alt></p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Since there are too many controls, and most of them are so similar to use, so I cut off here. If you’ve coded like above and seen what happened in the Unity, you may noticed that we can interact with those UI controls, but they are not functional. This is because they are not connected with other stuff yet. Next time I will list some examples and continue to put up some advanced UI controls. If you want to learn more, you can check the references.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://docs.unity3d.com/ScriptReference/EditorGUILayout.html" target="_blank" rel="noopener">Unity Documents</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Editor Scripting#1 - The Window Is Born</title>
      <link href="/UnityEditorDev1.html"/>
      <url>/UnityEditorDev1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Editor extension allows you to custom your own editor window which is qualified with some specialized functionalities for your project. It is very flexible since you can even make a common editor that can be widely used in many different projects.</p><p><img src="https://ww1.yunjiexi.club/2019/07/30/nRBNh.jpg" alt title="A custom window from unity3d.com"></p><p>And usually, creating a custom editor window involves following steps:</p><ol><li>Create a script that derives from EditorWindow.</li><li>Use code to trigger the window to display itself.</li><li>Implement the GUI code for your tool.</li></ol><blockquote><p>Notice:<br>All your editor-related scripts should be put in a folder called <code>Editor</code> within your project.</p></blockquote><hr><p>&nbsp;</p><h2 id="Construct-Your-First-Window"><a href="#Construct-Your-First-Window" class="headerlink" title="Construct Your First Window"></a>Construct Your First Window</h2><h3 id="Create-A-Script"><a href="#Create-A-Script" class="headerlink" title="Create A Script"></a>Create A Script</h3><p>Like what we’ve talked about, we should first create a scripte that derives from <code>EditorWindow</code>. You can name your script whatever you want, just make sure that the class holds the same name. Do not forget <code>using UnityEditor</code>.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEditor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>Since it derives from <code>EditorWindow</code> and doesn’t has to be attached to an object as a component, we can simply remove <code>Start</code> and <code>Update</code>.</p><p>&nbsp;</p><h3 id="Trigger-the-Window"><a href="#Trigger-the-Window" class="headerlink" title="Trigger the Window"></a>Trigger the Window</h3><p>Now we’ve been prepared to build a window.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Let’s go through the parameters one by one:</p><table><thead><tr><th>Parameter</th><th>Intro</th></tr></thead><tbody><tr><td><code>Type</code> t</td><td>The type of the window, must derive from <code>EditorWindow</code></td></tr><tr><td><code>bool</code> utility</td><td>True for utility window, false for normal window</td></tr><tr><td><code>string</code> title</td><td>The title of the window</td></tr><tr><td><code>bool</code> focus</td><td>Whether to give the window focus, if it already exists.</td></tr></tbody></table><blockquote><p>Notice:<br>This display function has to be static. And additionally, this function has a bunch of overloaded versions. If you want to know more about them, you can check it out <a href="https://docs.unity3d.com/ScriptReference/EditorWindow.GetWindow.html" target="_blank" rel="noopener">here</a>.</p></blockquote><p>Even though you create a window, you cannot show it off. The way you can trigger the window and show it is to use <code>attribute</code>. To do this, you just have to add a single line of code above the static display function:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token function">MenuItem</span><span class="token punctuation">(</span><span class="token string">"Window/Example Window"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Window/Example Window</code> means that you can open this window by clicking the <code>Example Window</code> item which will appear on the popup list of <code>Window</code>.</p><p><img src="https://ww1.yunjiexi.club/2019/07/30/nRtS3.png" alt></p><p><img src="https://ww1.yunjiexi.club/2019/07/30/nR9gS.png" alt></p><p>Here we go!</p><p>&nbsp;</p><h3 id="Advanced-Setup"><a href="#Advanced-Setup" class="headerlink" title="Advanced Setup"></a>Advanced Setup</h3><p>You can get some advanced setup done to better fit your demands after making some changes on the codes above. The following are several simple common examples, <a href="https://docs.unity3d.com/ScriptReference/EditorWindow.GetWindow.html" target="_blank" rel="noopener">here</a> are more for you to find out!</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleWindow</span> <span class="token operator">:</span> EditorWindow<span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ShowWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExampleWindow window <span class="token operator">=</span> <span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span>EditorWindow<span class="token punctuation">.</span><span class="token function">GetWindow</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>ExampleWindow<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the minimum size of the window</span>        window<span class="token punctuation">.</span>minSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the maximum size of the window</span>        window<span class="token punctuation">.</span>maxSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the position</span>        window<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Vector2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We have learned how to create a custom editor window in Unity, but it is not appliable now, since it contains nothing but a title and a whole gray panel. We will learn how to add some UI items on it and make use of them. See you guys next time.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://docs.unity3d.com/Manual/editor-EditorWindows.html" target="_blank" rel="noopener">Unity Documents</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Unity Editor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Unity Editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Graphics Review#1 - Rendering Pipeline</title>
      <link href="/CG1-RenderingPipeline.html"/>
      <url>/CG1-RenderingPipeline.html</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Rendering pipeline converts 3D scene into a 2D image phase by phase with given virtual camera, objects, light sources, textures, etc. We can generally divide it into 3 parts by order:</p><ul><li>Application stage</li><li>Geometry stage</li><li>Rasterization stage</li></ul><p><img src="https://ww1.yunjiexi.club/2019/07/27/nr10M.png" alt></p><hr><p>&nbsp;</p><h2 id="Application-Stage"><a href="#Application-Stage" class="headerlink" title="Application Stage"></a>Application Stage</h2><p>This stage is led by application and done by CPU. Tasks accomplished at this stage are below:</p><ul><li>Load the data from the hard drive into the CPU and do corresponding computations on the data, like collision detection.</li><li>Culling: discard all the objects that aren’t within the frustum and don’t intersect with the frustum.</li><li>Set up render states.</li><li>Draw call.</li></ul><blockquote><p>Notice:</p><ol><li>Render state defines that how a mesh should be rendered —— what shader to use, what material to apply, etc.</li><li>CPU and GPU work independently. How can they communicate? There is something called <code>command buffer</code>. CPU can push some orders into the buffer and GPU retrieve orders from the buffer. Draw call is one of the orders which makes the GPU start rendering a particular frame.</li></ol></blockquote><p>Finally, CPU assigns the primitive type and deliver the data of vertices to the GPU.</p><hr><p>&nbsp;</p><h2 id="Geometry-Stage"><a href="#Geometry-Stage" class="headerlink" title="Geometry Stage"></a>Geometry Stage</h2><p>Geometry stage is a pipeline itself:</p><ol><li>Vertex shader.</li><li>Tesselation shader.</li><li>Geometry shader.</li><li>Clipping.</li><li>Viewport mapping.</li></ol><h3 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h3><p>Vertex shader is scriptable. It is used for transformations and vertex shading.</p><p><img src="https://ww1.yunjiexi.club/2019/07/27/nrbwe.png" alt title="Coordinate System From LearnOpenGL"></p><blockquote><p>Vertex shading is also called <code>Gourand Shading</code>. Get more information about it <a href="https://learnopengl.com/Lighting/Basic-Lighting" target="_blank" rel="noopener">here</a>!</p></blockquote><p>As you see, this process is actually a serie of matrix computations. Vertex shader sequentially carrys on these computatioins on the vertices one by one, converting them from <code>object space</code> into <code>clip space</code>. As to the following part, in fact, they are not parts of vertex shader, OpenGL will help you with that.</p><p>&nbsp;</p><h3 id="Clipping"><a href="#Clipping" class="headerlink" title="Clipping"></a>Clipping</h3><p>You may have noticed that the virtual camera can probably not cover a complete object through the whole transformation process. When this happens, the part outside the frustum will be discarded and then new vertices will be created. This takes place in the projection transformation process.</p><p><img src="https://ww1.yunjiexi.club/2019/07/28/nrprp.png" alt title="Clipping"></p><p>In more detail, when we convert the coordinates from view space into clip space, we have to define a <code>projection matrix</code>. This matrix determines a range of coordinates, for example, $(-1000, 1000)$. Then through the projection transfromation, the coordinates within the range will be mapped onto the <code>NDC (Normalized Device Coordinates)</code> in which the coodinates are within $(-1.0, 1.0)$. A vertex like $(1200, 400, 600)$ will not appear, because its $x$ component is out of range.</p><blockquote><p>Notice:<br>Clipping is kind of different from the culling we’ve mentioned. Culling is like a preprocess, and it discards the objects that are completely outside the frustum, while clipping reconstruct the objects that intersect with the frustum.</p></blockquote><p>&nbsp;</p><h3 id="Viewport-Mapping"><a href="#Viewport-Mapping" class="headerlink" title="Viewport Mapping"></a>Viewport Mapping</h3><p>Once in the NDC, the <code>perspective division</code> is carried on. The $x$, $y$, $z$ components are divided by the homogeneous component $w$, and the 4D clip space coordinates are transform into 3D NDC coordinates. And then they are mapped onto screen space as fragments.</p><hr><p>&nbsp;</p><h2 id="Rasterization-Stage"><a href="#Rasterization-Stage" class="headerlink" title="Rasterization Stage"></a>Rasterization Stage</h2><p>This stage goes through 3 sub-stages:</p><ul><li>Triangle Setup</li><li>Triangle Traversal</li><li>Fragment Shader</li></ul><p>&nbsp;</p><h3 id="Triangle-Setup"><a href="#Triangle-Setup" class="headerlink" title="Triangle Setup"></a>Triangle Setup</h3><p>The output from the preceding stage are daata of vertices, for a triangle, they are data of the 3 endpoints.</p><p>&nbsp;</p><h3 id="Triangle-Traversal"><a href="#Triangle-Traversal" class="headerlink" title="Triangle Traversal"></a>Triangle Traversal</h3><p>Triangle traversal is also called <code>scan conversion</code>. It checks if a pixel is covered by a triangle. If it is, then create a <code>fragment</code>. A fragment is something like a prototype of a pixel, which contains a bunch of data like depth and data from geometry stage. If a fragment is at an endpoint of the triangle, it contains the endpoint data, or its data come from interpolations.</p><p>&nbsp;</p><h3 id="Fragment-Shader"><a href="#Fragment-Shader" class="headerlink" title="Fragment Shader"></a>Fragment Shader</h3><p>Use interpolated data as input, carry on corresponding shading computations pixel by pixel, like lighting, texture mapping, etc.</p><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This is just an overview of rendering pipeline which mainly goes through some fundamental concepts without any code. Rendering pipeline is a core of computer graphics. It is what you have to know, if you want to be engaged in related fields, and I highly recommend you to study on <a href="https://learnopengl.com" target="_blank" rel="noopener">LearnOpenGL</a> which is a really good online OpenGL tutorial with both concepts and program guide. See you guys next time!</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://learnopengl.com" target="_blank" rel="noopener">LearnOpenGL</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Graphics </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#2 - Stack</title>
      <link href="/DataStructureJourney2.html"/>
      <url>/DataStructureJourney2.html</url>
      
        <content type="html"><![CDATA[<h2 id="What-Is-A-Stack"><a href="#What-Is-A-Stack" class="headerlink" title="What Is A Stack"></a>What Is A Stack</h2><p>Stack is a list-like structure in which elements maybe inserted or removed from only one end. It seems that this makes it less practical and less flexible than the lists, but it also makes it easy to implement and more efficient. We call this feature “LIFO” which stands for “Last-In, First-Out”. Simply, the insertion order goes reverse to that of removal.</p><hr><p>&nbsp;</p><h2 id="Stack-ADT"><a href="#Stack-ADT" class="headerlink" title="Stack ADT"></a>Stack ADT</h2><p>Before we define a stack ADT, we have to make something clear. There is only one element in the stack accessible, that is the one on the top of the stack, which we call the <code>top</code> element. The insertion operation on a stack is called <code>push</code>. The removal operation is called <code>pop</code>. And it is worth noticing that we can just pop out the top element.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Reinitialize the stack</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Push an element onto the stack</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Pop out the top element</span>    <span class="token keyword">virtual</span> E <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the top value</span>    <span class="token keyword">virtual</span> <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">TopValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the stack size</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="Stack-Implementation"><a href="#Stack-Implementation" class="headerlink" title="Stack Implementation"></a>Stack Implementation</h2><h3 id="Array-based-Stack-Implementation"><a href="#Array-based-Stack-Implementation" class="headerlink" title="Array-based Stack Implementation"></a>Array-based Stack Implementation</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ArrayStack</span><span class="token operator">:</span> <span class="token keyword">public</span> Stack<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Maximum number of elements the stack can store</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Index for the top element</span>    E<span class="token operator">*</span> listArray<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Array holding the element</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> size <span class="token operator">=</span> defaultSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxSize <span class="token operator">=</span> defaultSize<span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listArray<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> listArray<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">TopValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> listArray<span class="token punctuation">[</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h3 id="Linked-Stack-Implementation"><a href="#Linked-Stack-Implementation" class="headerlink" title="Linked Stack Implementation"></a>Linked Stack Implementation</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">LinkedStack</span><span class="token operator">:</span> <span class="token keyword">public</span> Stack<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> top<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Pointer to the top element</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The number of element in the stack</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LinkedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">LinkedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> node <span class="token operator">=</span> top<span class="token punctuation">;</span>            top <span class="token operator">=</span> top<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">delete</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> node <span class="token operator">=</span> top<span class="token punctuation">;</span>        E element <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>        top <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">delete</span> node<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">TopValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Stack is empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>Notice:</p><ol><li>Here is a very important difference we have to notice between these two implementations. That is the top element in a array-based stack is at the end of the array, while the top element in a linked stack is at the very beginning, although they are both called top element. This kind of design make it easier to implement pushing and popping for both.</li><li>The <code>Node</code> class has been defined last time. Check <a href="/DataStructureJourney1.html" title="here">here</a>!</li></ol></blockquote><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>All operations for the two implementations above both take constant time, so as for time aspect, they are equally efficient. The comparison of the total space requried is similar to the lists implementation: the array-based has to be predetermined and fixed, and the linked can flexibly adjust size but requires extra space for pointers.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Data Structure &amp; Algorithm Analysis in C++ - Clifford A. Shafter</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Review#1 - List</title>
      <link href="/DataStructureJourney1.html"/>
      <url>/DataStructureJourney1.html</url>
      
        <content type="html"><![CDATA[<h2 id="What-Is-A-List"><a href="#What-Is-A-List" class="headerlink" title="What Is A List"></a>What Is A List</h2><p>List is a finite, ordered sequence of data items. It mathematically resembles set. Generally, all the data items in a list have the same type, but we do have some cases where different types of data items are in the same list.</p><blockquote><p><strong>Notice:</strong><br>The “ordered” here doesn’t mean that the list is sorted by value, it just means that every element in the list has a particular position instead.</p></blockquote><p>When a list contains no elements, we call it an <code>empty</code> list. The number of elements that are currently stored in the list is called <code>length</code> of the list. The beginning of the list is called <code>head</code>, while the end of the list is called <code>tail</code>.</p><hr><p>&nbsp;</p><h2 id="List-Operations"><a href="#List-Operations" class="headerlink" title="List Operations"></a>List Operations</h2><p>A list without any operations related to it is meaningless. Before we define a data structure implementation, we should first design some list operations. </p><p>Obviously, a list should be capable of extending and shrinking. For extending, we can simply append an element at the end of the list or insert an element at a particular position. For shrinking, we should remove an element and shift all the elements behind to the head direction. Additionally, we should be able to get access to all the elements in the list for the purpose of retrieving. Although these are just some basic operations, you are free to add some more to make your data structure versatile.</p><p>&nbsp;</p><h3 id="List-ADT"><a href="#List-ADT" class="headerlink" title="List ADT"></a>List ADT</h3><p>ADT is short for <code>abstract data type</code>. It is a realization of a data type as a software component. It contains the logic of data storing and some operations on the data. However, it is just an interface, which is separated from its corresponding implementation, making it possible for users to apply it simply without being stuck on the detail.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Default constructor</span>    <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Destructor</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clear all list contents</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Insert an element at the current position</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Append an element at the end of the list</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Remove and return the current element</span>    <span class="token keyword">virtual</span> E <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set current position to the start of the list</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MoveToHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set current position to the end of the list</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MoveToTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Move the current position to the next</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Move the current position one step left</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the number of the elements</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the current position</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">CurrPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Move to a particular position</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MoveToPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Return the element</span>    <span class="token keyword">virtual</span> <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="List-Implementation"><a href="#List-Implementation" class="headerlink" title="List Implementation"></a>List Implementation</h2><h3 id="Array-based-List"><a href="#Array-based-List" class="headerlink" title="Array-based List"></a>Array-based List</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">:</span> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Maximum number of elements this list can store</span>    <span class="token keyword">int</span> listSize<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Number of elements this list currently stores</span>    <span class="token keyword">int</span> curr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Current position</span>    E<span class="token operator">*</span> listArray<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Array holding the elements</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> size <span class="token operator">=</span> defaultSize<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// "defaultSize" can be any nonnegative integer</span>        maxSize <span class="token operator">=</span> size<span class="token punctuation">;</span>        listSize <span class="token operator">=</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> listArray<span class="token punctuation">;</span>        listSize <span class="token operator">=</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        listArray <span class="token operator">=</span> <span class="token keyword">new</span> E<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span>listSize <span class="token operator">&lt;</span> maxSize<span class="token punctuation">,</span> <span class="token string">"The list is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> listSize<span class="token punctuation">;</span> i <span class="token operator">></span> curr<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            listArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> listArray<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        listArray<span class="token punctuation">[</span>currPos<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        listSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span>listSize <span class="token operator">&lt;</span> maxSize<span class="token punctuation">,</span> <span class="token string">"The list is full!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listArray<span class="token punctuation">[</span>listSize<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        listSize<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curr <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>curr <span class="token operator">&lt;</span> listSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Element doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        E tempValue <span class="token operator">=</span> listArray<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> curr<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            listArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> listArray<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        listSize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tempValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MoveToHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MoveToTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>listSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">&lt;</span> listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            curr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            curr<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> listSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">currPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> curr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MoveToPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> listSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Invalid Position!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        curr <span class="token operator">=</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> E<span class="token operator">&amp;</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> listArray<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&nbsp;</p><h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><p>List node implementation:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    E element<span class="token punctuation">;</span>    Node<span class="token operator">*</span> next<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> elementValue<span class="token punctuation">,</span> Node<span class="token operator">*</span> nextNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        element <span class="token operator">=</span> elementValue<span class="token punctuation">;</span>        next <span class="token operator">=</span> nextNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> nextNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> nextNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>Linked list implementation:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> E<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">:</span> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> head<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Head of the list</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> tail<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Tail of the list</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> curr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Current node of the list</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Number of the nodes in the list</span>    <span class="token comment" spellcheck="true">// Initializtion</span>    <span class="token keyword">void</span> <span class="token function">Initialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> tail <span class="token operator">=</span> head <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Release store</span>    <span class="token keyword">void</span> <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">delete</span> curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Initialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clear the contents in the list</span>    <span class="token keyword">void</span> <span class="token function">CLear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Initialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Insert an element at current position</span>    <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tail <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Append an element at the end of the list</span>    <span class="token keyword">void</span> <span class="token function">Append</span><span class="token punctuation">(</span><span class="token keyword">const</span> E<span class="token operator">&amp;</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        tail <span class="token operator">=</span> node<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Remove and return current element</span>    E <span class="token function">Remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If the current node is the head node</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            E element <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>            <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> element<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Find the node preceding the current node</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            E element <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> delTemp <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">delete</span> delTemp<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> element<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the start</span>    <span class="token keyword">void</span> <span class="token function">MoveToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the end</span>    <span class="token keyword">void</span> <span class="token function">MoveToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the preceding position</span>    <span class="token keyword">void</span> <span class="token function">Prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to the next position</span>    <span class="token keyword">void</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr <span class="token operator">=</span> curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">CurrPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Move to a particular position</span>    <span class="token keyword">void</span> <span class="token function">MoveTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">!=</span> pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    E <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> curr<span class="token operator">-</span><span class="token operator">></span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><p>&nbsp;</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>These two basic list implementations do have their own pros and cons respectively. For array-based list, it is obvious that the size of it has to be predetermined and it is fixed. While with linked list, you can dynamically adjust the size of the list by inserting or removing nodes, however, it requires more space since a node has to store a pointer to the next node, except for the element. As to the time cost, the array-based list is more time-consuming when it comes to the inserting and removing, because the list has to resort all the elements following, which is not neccessary in the linked list.</p><hr><p>&nbsp;</p><h2 id="Bye-Bye"><a href="#Bye-Bye" class="headerlink" title="Bye Bye"></a>Bye Bye</h2><p>The first part of the data structure is finished. I think it is a very good start and a beneficial warm-up for me, whose purpose is to learn and to get more familiar with data structure. I hope you guys like it, and see you next time.</p><hr><p>&nbsp;</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Data Structure &amp; Algorithm Analysis in C++ - Clifford A. Shafter</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Hi everybody! Welcome to Rhys’s!</p><p>I’m so glad that I finally manage to build my own blog, and I cannot wait to share with you guys all the interesting stuff. It is not easy for me to start writing blogs, since I am not so qualified and still have much to learn. But writing something and sharing and discussing them with others is also an awesome way to learn, isn’t it?</p><p>I really hope that you can get something new from Rhys’s, or just get inspired and come up with some new ideas from things that you’ve been learned about. If you have problems or catch some errors, you can get in touch with me through e-mail. I’m always a listener, a helper and a learner.</p><p>See ya!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
